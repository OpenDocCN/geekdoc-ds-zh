["```py\n﻿﻿﻿﻿class Toy(object):\n    def __init__(self):\n        self._elems = []\n    def add(self, new_elems):\n        \"\"\"new_elems is a list\"\"\"\n        self._elems += new_elems\n    def size(self):\n        return len(self._elems)\n```", "```py\n﻿﻿print(type(Toy))\nprint(type(Toy.__init__), type(Toy.add), type(Toy.size))\n```", "```py\n﻿<class ‘type'>\n<class 'function'> <class 'function'> <class 'function'>\n```", "```py\n`s = Toy()`\n```", "```py\n﻿`﻿﻿t1 = Toy() print(type(t1)) print(type(t1.add)) t2 = Toy() print(t1 is t2) #test for object identity`\n```", "```py\n﻿<class '__main__.Toy'>\n<class 'method'>\nFalse\n```", "```py\n﻿﻿﻿t1 = Toy()\nt2 = Toy()\nt1.add([3, 4])\nt2.add([4])\nprint(t1.size() + t2.size())\n```", "```py\ns = Int_set()\ns.insert(3)\nprint(s.member(3))\n```", "```py\n﻿﻿﻿s = Int_set()\ns.insert(3)\ns.insert(4)\nprint(str(s))\nprint('The value of s is', s)\n```", "```py\n﻿﻿{3,4}\nThe value of s is {3,4}\n```", "```py\n﻿    def union(self, other):\n        \"\"\"other is an Int_set\n           mutates self so that it contains exactly the elemnts in self\n           plus the elements in other.\"\"\"\n```", "```py\n﻿﻿The value of t3 is [1, 2, 3, 4]\nThe length of t3 is 4\nThe value A is associated with the key t1 in d.\n```", "```py\n﻿me = Person('Michael Guttag')\nhim = Person('Barack Hussein Obama')\nher = Person('Madonna')\nprint(him.get_last_name())\nhim.set_birthday(datetime.date(1961, 8, 4))\nher.set_birthday(datetime.date(1958, 8, 16))\nprint(him.get_name(), 'is', him.get_age(), ‘days old')\n```", "```py\npList = [me, him, her]\nfor p in pList:\n    print(p)\npList.sort()\nfor p in pList:\n    print(p)\n```", "```py\nMichael Guttag\nBarack Hussein Obama\nMadonna\nMichael Guttag\nMadonna\nBarack Hussein Obama\n```", "```py\np1 = MIT_person('Barbara Beaver')\nprint(str(p1) + '\\'s id number is ' + str(p1.get_id_num()))\n```", "```py\nBarbara Beaver's id number is 0\n```", "```py\n`'\\'s id number is '`\n```", "```py\np1 = MIT_person('Mark Guttag')\np2 = MIT_person('Billy Bob Beaver')\np3 = MIT_person('Billy Bob Beaver')\np4 = Person('Billy Bob Beaver')\n```", "```py\nprint('p1 < p2 =', p1 < p2)\nprint('p3 < p2 =', p3 < p2)\nprint('p4 < p1 =', p4 < p1)\n```", "```py\np1 < p2 = True\np3 < p2 = False\np4 < p1 = True\n```", "```py\nprint('p1 < p4 =', p1 < p4)\n```", "```py\n﻿AttributeError: 'Person' object has no attribute '_id_num'\n```", "```py\n﻿class Politician(Person):\n    \"\"\" A politician is a person who can belong to a political party\"\"\"  \n    def __init__(self, name, party = None):\n        \"\"\"name and party are strings\"\"\"\n    def get_party(self):\n        \"\"\"returns the party to which self belongs\"\"\"\n    def might_agree(self, other):\n        \"\"\"returns True if self and other belong to the same part\n             or at least one of then does not belong to a party\"\"\"\n```", "```py\np5 = Grad('Buzz Aldrin')\np6 = UG('Billy Beaver', 1984)\nprint(p5, 'is a graduate student is', type(p5) == Grad)\nprint(p5, 'is an undergraduate student is', type(p5) == UG)\n```", "```py\nBuzz Aldrin is a graduate student is True\nBuzz Aldrin is an undergraduate student is False\n```", "```py\ndef is_student(self):\n    return isinstance(self, Student)\n```", "```py\nprint(p5, 'is a student is', p5.is_student())\nprint(p6, 'is a student is', p6.is_student())\nprint(p3, 'is a student is', p3.is_student())\n```", "```py\nBuzz Aldrin is a student is True\nBilly Beaver is a student is True\nBilly Bob Beaver is a student is False\n```", "```py\ndef is_student(self):\n    return type(self) == Grad or type(self) == UG\n```", "```py\n﻿class Transfer_student(Student):\n    def __init__(self, name, from_school):\n        MIT_person.__init__(self, name)\n        self._from_school = from_school\n    def get_old_school(self):\n        return self._from_school\n```", "```py\n﻿course = Grades()\ncourse.add_student(Grad('Bernie'))\nall_students = course.get_students()\nall_students.append(Grad('Liz'))\n```", "```py\n﻿Jane Doe's mean grade is 75.0\nPierce Addison's mean grade is 75.0\nDavid Henry has no grades\nBilly Buckner's mean grade is 50.0\nBucky F. Dent's mean grade is 87.5\n```", "```py\nRafael = MIT_person('Rafael Reif')\n```", "```py\ntest = info_hiding()\nprint(test.visible)\nprint(test.__also_visible__)\nprint(test.__invisible)\n```", "```py\nLook at me\nLook at me too \n```", "```py\n﻿AttributeError: 'info_hiding' object has no attribute '__invisible'\n```", "```py\ntest = info_hiding()\ntest.print_invisible()\ntest.__print_invisible__()\ntest.__print_invisible()\n```", "```py\n﻿﻿Don't look at me directly\nDon't look at me directly\n```", "```py\n﻿AttributeError: 'info_hiding' object has no attribute '__print_invisible'\n```", "```py\n﻿class Sub_class(info_hiding):\n    def new_print_invisible(self):\n        print(self.__invisible)       \ntest_sub = Sub_class()\ntest_sub.new_print_invisible()\n```", "```py\n﻿ ﻿AttributeError: ‘Sub_class' object has no attribute '_Sub_class__invisible'\n```", "```py\n`me.age = Rafael.get_id_num()`\n```", "```py\n`for s in course.get_students():`\n```", "```py\n﻿book = Grades()\nbook.add_student(Grad('Julie'))\nbook.add_student(Grad('Lisa'))\nfor s in book.get_students():\n    print(s)\n```", "```py\nJulie\nLisa\n```", "```py\n`for s in course.get_students():`\n```", "```py\n﻿def get_students_above(self, grade):\n    \"\"\"Return the students a mean grade > g one at a time\"\"\"\n```", "```py\n﻿compare_mortgages(amt=200000, years=30, fixed_rate=0.035,\n                  pts = 2, pts_rate=0.03, var_rate1=0.03,\n                  var_rate2=0.05, var_months=60)\n```", "```py\n﻿﻿Fixed, 3.5%\n Total payments = $323,312\nFixed, 3.0%, 2 points\n Total payments = $307,555\n3.0% for 60 months, then 5.0%\n Total payments = $362,435\n```"]
["```py\n`[plt.sourceforge.net/users/index.html](http://plt.sourceforge.net/users/index.html)`\n```", "```py\n﻿import matplotlib.pyplot as plt\n﻿plt.plot([1,2,3,4], [1,7,3,5]) #draw on current figure\n```", "```py\n`﻿plt.figure(1)                  #create figure 1 plt.plot([1,2,3,4], [1,2,3,4]) #draw on figure 1 plt.figure(2)                  #create figure 2 plt.plot([1,4,2,3], [5,6,7,8]) #draw on figure 2 plt.savefig('Figure-Addie')    #save figure 2 plt.figure(1)                  #go back to working on figure 1 plt.plot([5,6,10,3])           #draw again on figure 1 plt.savefig('Figure-Jane')     #save figure 1`\n```", "```py\n[http://plt.org/api/pyplot_api.html#plt.pyplot.plot](http://plt.org/api/pyplot_api.html#plt.pyplot.plot)\n```", "```py\n﻿﻿principal = 10000 #initial investment\ninterestRate = 0.05\nyears = 20\nvalues = []\nfor i in range(years + 1):\n    values.append(principal)\n    principal += principal*interestRate\nplt.plot(values, '-k', linewidth = 30)\nplt.title('5% Growth, Compounded Annually',\n            fontsize = 'xx-large')\nplt.xlabel('Years of Compounding', fontsize = 'x-small')\nplt.ylabel('Value of Principal ($)')\n```", "```py\n`plt.rcParams['lines.linewidth'] = 6`.\n```", "```py\n[http://plt.org/users/customizing.html](http://plt.org/users/customizing.html)\n```", "```py\n`[http://plt.org/users/style_sheets.html#style-sheets](http://plt.org/users/style_sheets.html#style-sheets)`\n```", "```py\n﻿#set line width\nplt.rcParams['lines.linewidth'] = 4\n#set font size for titles \nplt.rcParams['axes.titlesize'] = 20\n#set font size for labels on axes\nplt.rcParams['axes.labelsize'] = 20\n#set size of numbers on x-axis\nplt.rcParams['xtick.labelsize'] = 16\n#set size of numbers on y-axis\nplt.rcParams['ytick.labelsize'] = 16\n#set size of ticks on x-axis\nplt.rcParams['xtick.major.size'] = 7\n#set size of ticks on y-axis\nplt.rcParams['ytick.major.size'] = 7\n#set size of markers, e.g., circles representing points\nplt.rcParams['lines.markersize'] = 10\n#set number of times marker is shown when displaying legend\nplt.rcParams['legend.numpoints'] = 1 ﻿\n#Set size of type in legend\nplt.rcParams['legend.fontsize'] = 14\n```", "```py\n`﻿import numpy as np`\n`a1 = np.array([1, 2, 4]) print('a1 =', a1) a2 = a1*2 print('a2 =', a2) print('a1 + 3 =', a1 + 3) print('3 - a1 =', 3 - a1) print('a1 - a2 =', a1 - a2) print('a1*a2 =', a1*a2)`\n```", "```py\n﻿a1 = [1 2 4]\na2 = [2 4 8]\na1 + 3 = [4 5 7]\n3 - a1 = [ 2  1 -1]\na1 - a2 = [-1 -2 -4]\na1*a2 = [ 2  8 32]\n```", "```py\n`﻿compare_mortgages(amt=200000, years=30, fixed_rate=0.07,                  pts = 3.25, pts_rate=0.05, var_rate1=0.045,                  var_rate2=0.095, var_months=48)`\n```", "```py\n﻿﻿﻿﻿fig = plt.figure(figsize=(12, 8.5))\ninfections_ax = plt.axes([0.12, 0.2, 0.8, 0.65])\ncontacts_ax = plt.axes([0.25, 0.09, 0.65, 0.03])\nstart_ax = plt.axes([0.25, 0.06, 0.65, 0.03])\nend_ax = plt.axes([0.25, 0.03, 0.65, 0.03]\n```", "```py\nfrom Matplotlib.widgets import Slider\n```", "```py\n﻿contacts_slider = Slider(\n                      contacts_ax,  # axes object containing the slider\n                      ‘reduced\\ncontacts/day',  # name of slider\n                      0,   # minimal value of the parameter\n                      50,  # maximal value of the parameter\n                      50)  # initial value of the parameter)\ncontacts_slider.label.set_fontsize(12)\nstart_day_slider = Slider(start_ax, ‘start reduction', 1, 30, 20)\nstart_day_slider.label.set_fontsize(12)\nend_day_slider = Slider(end_ax, 'end reduction', 30, 400, 200)\nend_day_slider.label.set_fontsize(12)\n```", "```py\n﻿﻿def update(fixed, infection_plot, txt_box,\n           contacts_slider, start_day_slider, end_day_slider):\n    variable = {'red_daily_contacts': contacts_slider.val,\n                ‘red_start': start_day_slider.val,\n                ‘red_end': end_day_slider.val}\n    I, total_infections = simulation(fixed, variable)\n    infection_plot.set_ydata(I)   # new y-coordinates for plot\n    txt_box.set_text(f'Total Infections =  {total_infections:,.0f}')\n```", "```py\n﻿slider_update = lambda _: update(fixed, infection_plot, txt_box,\n                                 contacts_slider, start_day_slider,\n                                 end_day_slider)\ncontacts_slider.on_changed(slider_update)\nstart_day_slider.on_changed(slider_update)\nend_day_slider.on_changed(slider_update)\n```", "```py\n﻿﻿infections, total_infections = simulation(fixed, variable)\nplt.axes(infections_ax)\ninfection_plot, txt_box = plot_infections(infections,\n                                          total_infections, fixed)\n```"]
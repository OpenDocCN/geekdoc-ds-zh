- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: EXCEPTIONS AND ASSERTIONS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 异常和断言
- en: An “exception” is usually defined as “something that does not conform to the
    norm,” and is therefore somewhat rare. There is nothing rare about **exceptions**
    in Python. They are everywhere. Virtually every module in the standard Python
    library uses them, and Python itself will raise them in many circumstances. You've
    already seen some exceptions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “异常”通常定义为“不符合规范的事物”，因此有些稀有。在Python中，**异常**并不稀有。它们无处不在。标准Python库中的几乎每个模块都在使用它们，而Python本身在许多情况下也会引发它们。你已经见过一些异常。
- en: Open a Python shell and enter
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个Python终端并输入
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and the interpreter will respond with something like
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器会响应类似于以下内容的内容。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`IndexError` is the type of exception that Python **raises** when a program
    tries to access an element that is outside the bounds of an indexable type. The
    string following `IndexError` provides additional information about what caused
    the exception to occur.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`IndexError`是Python在程序尝试访问超出可索引类型范围的元素时**引发**的异常类型。紧随`IndexError`的字符串提供了有关导致异常发生的额外信息。'
- en: Most of the built-in exceptions of Python deal with situations in which a program
    has attempted to execute a statement with no appropriate semantics. (We will deal
    with the exceptional exceptions—those that do not deal with errors—later in this
    chapter.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python的大多数内置异常处理那些程序试图执行没有适当语义的语句的情况。（我们将在本章后面处理那些不涉及错误的特殊异常。）
- en: Those readers (all of you, we hope) who have attempted to write and run Python
    programs already have encountered many of these. Among the most common types of
    exceptions are `TypeError`, `IndexError`, `NameError`, and `ValueError`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那些尝试编写和运行Python程序的读者（我们希望你们都是）已经遇到过许多这样的异常。最常见的异常类型包括`TypeError`、`IndexError`、`NameError`和`ValueError`。
- en: 9.1 Handling Exceptions
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.1 处理异常
- en: Up to now, we have treated exceptions as terminal events. When an exception
    is raised, the program terminates (crashes might be a more appropriate word in
    this case), and we go back to our code and attempt to figure out what went wrong.
    When an exception is raised that causes the program to terminate, we say that
    an **unhandled exception** has been raised.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们将异常视为终止事件。当抛出异常时，程序终止（在这种情况下，崩溃可能是更合适的词），然后我们返回代码，试图找出出错的原因。当抛出导致程序终止的异常时，我们说发生了**未处理的异常**。
- en: An exception does not need to lead to program termination. Exceptions, when
    raised, can and should be **handled** by the program*.* Sometimes an exception
    is raised because there is a bug in the program (like accessing a variable that
    doesn't exist), but many times, an exception is something the programmer can and
    should anticipate. A program might try to open a file that does not exist. If
    an interactive program asks a user for input, the user might enter something inappropriate.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 异常不一定会导致程序终止。引发的异常可以并且应该由程序**处理**。有时异常是因为程序中存在错误（例如访问不存在的变量），但许多情况下，异常是程序员可以并且应该预见的。程序可能尝试打开一个不存在的文件。如果一个交互式程序要求用户输入，用户可能会输入不适当的内容。
- en: Python provides a convenient mechanism, **try-except**, for **catching** and
    handling exceptions. The general form is
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一个方便的机制，**try-except**，用于**捕获**和处理异常。一般形式是
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you know that a line of code might raise an exception when executed, you
    should handle the exception. In a well-written program, unhandled exceptions should
    be the exception.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道某行代码在执行时可能会引发异常，你应该处理该异常。在一段写得好的程序中，未处理的异常应该是个例外。
- en: Consider the code
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下这段代码。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Most of the time, this code will work just fine, but it will fail if `num_failures`
    happens to be zero. The attempt to divide by zero will cause the Python runtime
    system to raise a `ZeroDivisionError` exception, and the `print` statement will
    never be reached.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，这段代码将正常工作，但如果`num_failures`恰好为零，则会失败。尝试除以零将导致Python运行时系统引发`ZeroDivisionError`异常，而`print`语句将永远无法被执行。
- en: It is better to write something along the lines of
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最好写成如下内容
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Upon entering the `try` block, the interpreter attempts to evaluate the expression
    `num_successes/num_failures`. If expression evaluation is successful, the program
    assigns the value of the expression to the variable `success_failure_ratio`, executes
    the `print` statement at the end of the `try` block, and then proceeds to execute
    whatever code follows the `try-except` block. If, however, a `ZeroDivisionError`
    exception is raised during the expression evaluation, control immediately jumps
    to the `except` block (skipping the assignment and the `print` statement in the
    `try` block), the `print` statement in the `except` block is executed, and then
    execution continues following the `try-except` block.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`try`块后，解释器尝试评估表达式`num_successes/num_failures`。如果表达式评估成功，程序将表达式的值赋给变量`success_failure_ratio`，执行`try`块末尾的`print`语句，然后继续执行`try-except`块后面的代码。然而，如果在表达式评估过程中抛出`ZeroDivisionError`异常，控制将立即跳转到`except`块（跳过`try`块中的赋值和`print`语句），执行`except`块中的`print`语句，然后继续执行`try-except`块之后的代码。
- en: "**Finger exercise:** Implement a function that meets the specification below.\
    \ Use a `try-except` block. Hint: before starting to code, you might want to type\
    \ something like `\uFEFF1 + 'a'` into the shell to see what kind of exception\
    \ is raised."
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**手指练习：** 实现一个满足以下规范的函数。使用`try-except`块。提示：在开始编码之前，你可能想在shell中输入类似`1 + ''a''`的内容，以查看抛出什么类型的异常。'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If it is possible for a block of program code to raise more than one kind of
    exception, the reserved word `except` can be followed by a tuple of exceptions,
    e.g.,
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序代码块可能引发多种异常，保留字`except`后面可以跟一个异常元组，例如，
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: in which case the `except` block will be entered if any of the listed exceptions
    is raised within the `try` block.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果在`try`块内抛出列出的任何异常，将进入`except`块。
- en: Alternatively, we can write a separate `except` block for each kind of exception,
    which allows the program to choose an action based upon which exception was raised.
    If the programmer writes
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以为每种异常编写一个单独的`except`块，这样程序可以根据抛出的异常选择相应的操作。如果程序员编写
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: the `except` block will be entered if any kind of exception is raised within
    the `try` block. Consider the function definition in [Figure 9-1](#c9-fig-0001).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`try`块内抛出任何类型的异常，将会进入`except`块。请参阅[图9-1](#c9-fig-0001)中的函数定义。
- en: '![c9-fig-0001.jpg](../images/c9-fig-0001.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![c9-fig-0001.jpg](../images/c9-fig-0001.jpg)'
- en: '[Figure 9-1](#c9-fig-0001a) Using exceptions for control flow'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-1](#c9-fig-0001a) 使用异常进行控制流'
- en: There are two `except` blocks associated with the `try` block. If an exception
    is raised within the `try` block, Python first checks to see if it is a `ZeroDivisionError`.
    If so, it appends a special value, `nan`, of type `float` to `ratios`. (The value
    `nan` stands for “not a number.” There is no literal for it, but it can be denoted
    by converting the string `'nan'` or the string `'NaN'` to type `float`. When `nan`
    is used as an operand in an expression of type `float`, the value of that expression
    is also `nan`.) If the exception is anything other than a `ZeroDivisionError`,
    the code executes the second `except` block, which raises a `ValueError` exception
    with an associated string.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与`try`块相关联的有两个`except`块。如果在`try`块中抛出异常，Python首先检查它是否为`ZeroDivisionError`。如果是，它将类型为`float`的特殊值`nan`附加到`ratios`中。（值`nan`表示“不是一个数字”。它没有字面意义，但可以通过将字符串`'nan'`或字符串`'NaN'`转换为类型`float`来表示。当`nan`作为类型为`float`的表达式的操作数时，该表达式的值也是`nan`。）如果异常是其他类型而不是`ZeroDivisionError`，则代码执行第二个`except`块，抛出带有关联字符串的`ValueError`异常。
- en: In principle, the second `except` block should never be entered, because the
    code invoking `get_ratios` should respect the assumptions in the specification
    of `get_ratios`. However, since checking these assumptions imposes only an insignificant
    computational burden, it is probably worth practicing defensive programming and
    checking anyway.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，第二个`except`块不应该被进入，因为调用`get_ratios`的代码应该遵循`get_ratios`规范中的假设。然而，由于检查这些假设所带来的计算负担微乎其微，因此进行防御性编程并检查它们可能是值得的。
- en: The following code illustrates how a program might use `get_ratios`. The name
    `msg` in the line `except ValueError as msg:` is bound to the argument (a string
    in this case) associated with `ValueError` when it was raised. When the code
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了程序如何使用`get_ratios`。在行`except ValueError as msg:`中，`msg`绑定到与抛出的`ValueError`相关联的参数（在这种情况下是一个字符串）。当代码
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: is executed it prints
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后打印
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For comparison, [Figure 9-2](#c9-fig-0002) contains an implementation of the
    same specification, but without using a `try-except`. The code in [Figure 9-2](#c9-fig-0002)
    is longer and more difficult to read than the code in [Figure 9-1](#c9-fig-0001).
    It is also less efficient. (The code in [Figure 9-2](#c9-fig-0002) could be shortened
    by eliminating the local variables `vect1_elem` and `vect2_elem`, but only at
    the cost of introducing yet more inefficiency by indexing into the lists repeatedly.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较，[图9-2](#c9-fig-0002)包含了相同规范的实现，但没有使用`try-except`。 [图9-2](#c9-fig-0002)中的代码比[图9-1](#c9-fig-0001)中的代码更长且更难阅读，效率也更低。（[图9-2](#c9-fig-0002)中的代码可以通过消除局部变量`vect1_elem`和`vect2_elem`来缩短，但这样做将通过重复索引列表而引入更多的低效。）
- en: '![c9-fig-0002.jpg](../images/c9-fig-0002.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![c9-fig-0002.jpg](../images/c9-fig-0002.jpg)'
- en: '[Figure 9-2](#c9-fig-0002a) Control flow without a try-except'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-2](#c9-fig-0002a) 没有try-except的控制流'
- en: Let's look at another example. Consider the code
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。考虑以下代码：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the user obligingly types a string that can be converted to an integer, everything
    will be fine. But suppose the user types `abc`? Executing the line of code will
    cause the Python runtime system to raise a `ValueError` exception, and the `print`
    statement will never be reached.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户乐意输入一个可以转换为整数的字符串，一切都会很好。但假设用户输入`abc`呢？执行这行代码将导致Python运行时系统抛出`ValueError`异常，而`print`语句将永远不会被执行。
- en: What the programmer should have written would look something like
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员应该写的代码大致如下：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After entering the loop, the program will ask the user to enter an integer.
    Once the user has entered something, the program executes the `try—except` block.
    If neither of the first two statements in the `try` block causes a `ValueError`
    exception to be raised, the `break` statement is executed and the `while` loop
    is exited. However, if executing the code in the `try` block raises a `ValueError`
    exception, control is immediately transferred to the code in the `except` block.
    Therefore, if the user enters a string that does not represent an integer, the
    program will ask the user to try again. No matter what text the user enters, it
    will not cause an unhandled exception.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进入循环后，程序会要求用户输入一个整数。一旦用户输入了某个值，程序将执行`try—except`块。如果`try`块中的前两个语句都没有引发`ValueError`异常，将执行`break`语句并退出`while`循环。然而，如果执行`try`块中的代码引发了`ValueError`异常，控制权将立即转移到`except`块中的代码。因此，如果用户输入了一个不表示整数的字符串，程序将要求用户重试。无论用户输入什么文本，都不会导致未处理的异常。
- en: 'The downside of this change is that the program text has grown from two lines
    to eight. If there are many places where the user is asked to enter an integer,
    this can be problematical. Of course, this problem can be solved by introducing
    a function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种改变的缺点是程序文本从两行增加到了八行。如果有很多地方要求用户输入整数，这可能会成为一个问题。当然，这个问题可以通过引入一个函数来解决：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Better yet, this function can be generalized to ask for any type of input:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，这个函数可以推广到请求任何类型的输入：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The function `read_val` is **polymorphic**, i.e., it works for arguments of
    many different types. Such functions are easy to write in Python, since types
    are **first-class objects**. We can now ask for an integer using the code
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`read_val`是**多态的**，即它适用于多种不同类型的参数。这类函数在Python中很容易编写，因为类型是**一等对象**。我们现在可以使用以下代码请求一个整数：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exceptions may seem unfriendly (after all, if not handled, an exception will
    cause the program to crash), but consider the alternative. What should the type
    conversion `int` do, for example, when asked to convert the string `'abc'` to
    an object of type `int`? It could return an integer corresponding to the bits
    used to encode the string, but this is unlikely to have any relation to the intent
    of the programmer. Alternatively, it could return the special value `None`. If
    it did that, the programmer would need to insert code to check whether the type
    conversion had returned `None`. A programmer who forgot that check would run the
    risk of getting some strange error during program execution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 异常可能看起来不友好（毕竟，如果不处理，异常会导致程序崩溃），但考虑一下替代方案。当要求将字符串`'abc'`转换为`int`类型的对象时，类型转换`int`应该怎么做？它可以返回与编码字符串所用位对应的整数，但这与程序员的意图不太可能相关。或者，它可以返回特殊值`None`。如果这样做，程序员就需要插入代码来检查类型转换是否返回了`None`。如果程序员忘记了这个检查，程序执行时就有可能出现一些奇怪的错误。
- en: With exceptions, the programmer still needs to include code dealing with the
    exception. However, if the programmer forgets to include such code and the exception
    is raised, the program will halt immediately. This is a good thing. It alerts
    the user of the program that something troublesome has happened. (And, as we discussed
    in Chapter 8, overt bugs are much better than covert bugs.) Moreover, it gives
    someone debugging the program a clear indication of where things went awry.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用异常时，程序员仍需包含处理异常的代码。然而，如果程序员忘记包含这样的代码且异常被引发，程序将立即停止。这是件好事。它提醒程序用户发生了一些麻烦的事情。（正如我们在第8章讨论的，显性错误远比隐性错误好。）此外，它为调试程序的人提供了明确的指示，说明哪里出了问题。
- en: 9.2 Exceptions as a Control Flow Mechanism
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.2 异常作为控制流机制
- en: Don't think of exceptions as purely for errors. They are a convenient flow-of-control
    mechanism that can be used to simplify programs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不要认为异常仅仅是错误的表现。它们是一个便捷的控制流机制，可以用来简化程序。
- en: In many programming languages, the standard approach to dealing with errors
    is to have functions return a value (often something analogous to Python's `None`)
    indicating that something is amiss. Each function invocation has to check whether
    that value has been returned. In Python, it is more usual to have a function raise
    an exception when it cannot produce a result that is consistent with the function's
    specification.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，处理错误的标准方法是让函数返回一个值（通常类似于Python的`None`），以指示出现了问题。每次函数调用都必须检查是否返回了该值。在Python中，通常在函数无法生成与其规格一致的结果时引发异常。
- en: The Python `**raise**` **statement** forces a specified exception to occur.
    The form of a raise statement is
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的`**raise**` **语句**强制引发指定的异常。raise语句的形式是：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The *exceptionName* is usually one of the built-in exceptions, e.g., `ValueError`.
    However, programmers can define new exceptions by creating a subclass (see Chapter
    10) of the built-in class `Exception`. Different types of exceptions can have
    different types of arguments, but most of the time the argument is a single string,
    which is used to describe the reason the exception is being raised.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*exceptionName* 通常是内置异常之一，例如`ValueError`。但是，程序员可以通过创建内置类`Exception`的子类（见第10章）来定义新的异常。不同类型的异常可以有不同类型的参数，但大多数情况下，参数是一个字符串，用于描述引发异常的原因。'
- en: '**Finger exercise:** Implement a function that satisfies the specification'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**手指练习：** 实现一个满足规格的函数。'
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's look at one more example, [Figure 9-3](#c9-fig-0003). The function `get_grades`
    either returns a value or raises an exception with which it has associated a value.
    It raises a `ValueError` exception if the call to `open` raises an `IOError`.
    It could have ignored the `IOError` and let the part of the program calling `get_grades`
    deal with it, but that would have provided less information to the calling code
    about what went wrong. The code that calls `get_grades` either uses the returned
    value to compute another value or handles the exception and prints an informative
    error message.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，[图9-3](#c9-fig-0003)。函数`get_grades`要么返回一个值，要么引发一个与之关联的值的异常。如果调用`open`引发`IOError`，它将引发`ValueError`异常。它本可以忽略`IOError`，让调用`get_grades`的程序部分处理，但那会给调用代码提供更少的信息，关于出错的原因。调用`get_grades`的代码要么使用返回的值计算另一个值，要么处理异常并打印有用的错误信息。
- en: '![c9-fig-0003.jpg](../images/c9-fig-0003.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![c9-fig-0003.jpg](../images/c9-fig-0003.jpg)'
- en: '[Figure 9-3](#c9-fig-0003a) Get grades'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-3](#c9-fig-0003a) 获取成绩'
- en: 9.3 Assertions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.3 断言
- en: 'The Python `assert` statement provides programmers with a simple way to confirm
    that the state of a computation is as expected. An **assert statement** can take
    one of two forms:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`assert`语句为程序员提供了一种简单的方法，以确认计算状态是否如预期。**assert语句**可以有两种形式：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18] `assert` *Boolean expression*`,` *argument* [PRE19]`  `## 9.4 Terms
    Introduced in Chapter    *   exceptions *   raising an exception *   unhandled
    exception *   handled exception *   try-except construct *   catch (an exception)
    *   polymorphic functions *   first-class objects *   raise statement *   assertions`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE18] `assert` *布尔表达式*`,` *参数* [PRE19]`  `## 9.4 在第章中引入的术语   *   异常 *   引发异常
    *   未处理异常 *   已处理异常 *   try-except构造 *   捕获（异常） *   多态函数 *   一流对象 *   raise语句
    *   断言`'

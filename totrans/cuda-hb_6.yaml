- en: Appendix A. The CUDA Handbook Library
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 A. CUDA 手册库
- en: As mentioned in [Chapter 1](ch01.html#ch01), the source code accompanying this
    book is open source under the two-paragraph BSD license. A pointer to the source
    code is available on [www.cudahandbook.com](http://www.cudahandbook.com), and
    developers can find the Git repository at [https://github.com/ArchaeaSoftware/cudahandbook](https://github.com/ArchaeaSoftware/cudahandbook).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第 1 章](ch01.html#ch01) 中所提到，本书随附的源代码是开源的，采用两段式 BSD 许可证。源代码的指针可在 [www.cudahandbook.com](http://www.cudahandbook.com)
    找到，开发人员还可以在 [https://github.com/ArchaeaSoftware/cudahandbook](https://github.com/ArchaeaSoftware/cudahandbook)
    上找到 Git 仓库。
- en: This Appendix briefly describes the features of the CUDA Handbook Library (chLib),
    a set of portable header files located in the `chLib/` subdirectory of the source
    code project. chLib is not intended to be reused in production software. It provides
    the minimum functionality, in the smallest possible amount of source code, needed
    to illustrate the concepts covered in this book. chLib is portable to all target
    operating systems for CUDA, so it often must expose support for the intersection
    of those operating systems’ features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录简要描述了 CUDA 手册库（chLib）的功能，它是一组便携式头文件，位于源代码项目的 `chLib/` 子目录中。chLib 并不打算在生产软件中重复使用，它提供了最小的功能，且源代码量最小，用于说明本书中涉及的概念。chLib
    可移植到所有 CUDA 支持的操作系统，因此它通常需要暴露对这些操作系统功能交集的支持。
- en: A.1\. Timing
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1\. 定时
- en: The CUDA Handbook library includes a portable timing library that uses `QueryPerformanceCounter()`
    on Windows and `gettimeofday()` on non-Windows platforms. An example usage is
    as follows.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CUDA 手册库包括一个便携式定时库，它在 Windows 上使用 `QueryPerformanceCounter()`，在非 Windows 平台上使用
    `gettimeofday()`。一个示例用法如下。
- en: '[Click here to view code image](app01_images.html#p471pro01a)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[点击这里查看代码图像](app01_images.html#p471pro01a)'
- en: float
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: float
- en: TimeNULLKernelLaunches(int cIterations = 1000000 )
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TimeNULLKernelLaunches(int cIterations = 1000000 )
- en: '{'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: chTimerTimestamp start, stop;
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: chTimerTimestamp start, stop;
- en: chTimerGetTime( &start );
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: chTimerGetTime( &start );
- en: for ( int i = 0; i < cIterations; i++ ) {
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: for ( int i = 0; i < cIterations; i++ ) {
- en: NullKernel<<<1,1>>>();
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NullKernel<<<1,1>>>();
- en: '}'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: cudaThreadSynchronize();
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: cudaThreadSynchronize();
- en: chTimerGetTime( &stop );
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: chTimerGetTime( &stop );
- en: return 1e6*chTimerElapsedTime( &start, &stop ) /
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: return 1e6*chTimerElapsedTime( &start, &stop ) /
- en: (float) cIterations;
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: (float) cIterations;
- en: '}'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: This function times the specified number of kernel launches and returns the
    microseconds per launch. `chTimerTimestamp` is a high-resolution timestamp. Usually
    it is a 64-bit counter that increases monotonically over time, so two timestamps
    are needed to compute a time interval.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数计时指定数量的内核启动，并返回每次启动的微秒数。`chTimerTimestamp` 是一个高精度的时间戳，通常它是一个 64 位的计数器，随着时间单调递增，因此需要两个时间戳来计算时间间隔。
- en: The `chTimerGetTime()` function takes a snapshot of the current time. The `chTimerElapsedTime()`
    function returns the number of seconds that elapsed between two timestamps. The
    resolution of these timers is very fine (perhaps a microsecond), so `chTimerElapsedTime()`
    returns `double`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`chTimerGetTime()`函数获取当前时间的快照。`chTimerElapsedTime()`函数返回两个时间戳之间经过的秒数。这些计时器的分辨率非常精细（可能是微秒级别），因此`chTimerElapsedTime()`返回`double`类型。'
- en: '[Click here to view code image](app01_images.html#p472pro01a)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[点击这里查看代码图像](app01_images.html#p472pro01a)'
- en: '#ifdef _WIN32'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '#ifdef _WIN32'
- en: '#include <windows.h>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <windows.h>'
- en: typedef LARGE_INTEGER chTimerTimestamp;
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: typedef LARGE_INTEGER chTimerTimestamp;
- en: '#else'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '#else'
- en: typedef struct timeval chTimerTimestamp;
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: typedef struct timeval chTimerTimestamp;
- en: '#endif'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '#endif'
- en: void chTimerGetTime(chTimerTimestamp *p);
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: void chTimerGetTime(chTimerTimestamp *p);
- en: double chTimerElapsedTime( chTimerTimestamp *pStart, chTimerTimestamp
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: double chTimerElapsedTime( chTimerTimestamp *pStart, chTimerTimestamp
- en: '*pEnd );'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*pEnd );'
- en: double chTimerBandwidth( chTimerTimestamp *pStart, chTimerTimestamp
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: double chTimerBandwidth( chTimerTimestamp *pStart, chTimerTimestamp
- en: '*pEnd, double cBytes );'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*pEnd, double cBytes );'
- en: 'We may use CUDA events when measuring performance in isolation on the CUDA-capable
    GPU, such as when measuring device memory bandwidth of a kernel. Using CUDA events
    for timing is a two-edged sword: They are less affected by spurious system-level
    events, such as network traffic, but that sometimes can lead to overly optimistic
    timing results.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在CUDA支持的GPU上进行性能测量时，我们可能会使用CUDA事件，例如测量内核的设备内存带宽。使用CUDA事件进行计时是一把双刃剑：它们不太受系统级事件（如网络流量）的干扰，但这有时会导致过于乐观的计时结果。
- en: A.2\. Threading
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.2\. 线程
- en: chLib includes a minimalist threading library that enables the creation of a
    pool of “worker” CPU threads, plus facilities that enable a parent thread to “delegate”
    work onto worker threads. Threading is a particularly difficult feature to abstract,
    since different operating systems have such different facilities to enable it.
    Some operating systems even have “thread pools” that enable threads to be easily
    recycled, so applications don’t have to keep threads suspended waiting for a synchronization
    event that will be signaled when some work comes along.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: chLib包含一个简洁的线程库，支持创建一个“工作”CPU线程池，并提供功能使父线程能够将工作“委派”给工作线程。线程是一个特别难以抽象的特性，因为不同的操作系统有着截然不同的支持方式。一些操作系统甚至有“线程池”，使得线程可以轻松回收，这样应用程序就不必让线程处于暂停状态，等待某个同步事件的触发。
- en: '[Listing A.1](app01.html#app01lis01) gives the abstract threading support from
    `chLib/chThread.h`. It includes a `processorCount()` function that returns the
    number of CPU cores available (many applications that use multiple threads to
    take advantage of multiple CPU cores, such as our multithreaded N-body implementation
    in [Chapter 14](ch14.html#ch14), want to spawn one thread per core) and a C++
    class `workerThread` that enables a few simple threading operations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Creation and destruction
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '• `delegateSynchronous()`: the parent thread specifies a pointer to function
    for the worker to execute, and the function does not return until the worker thread
    is done.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '• `delegateAsynchronous()`: the parent thread specifies a pointer to function
    for the worker to run asynchronously; `workerThread::waitAll` must be called in
    order to synchronize the parent with its children.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: • The member function `waitAll()` waits until all specified worker threads have
    completed their delegated work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing A.1.* `workerThread` class.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#papp_apro01a)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: // Return the number of execution cores on the platform.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int processorCount();
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: // workerThread class - includes a thread ID (specified to constructor)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: class workerThread
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'public:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: workerThread( int cpuThreadId = 0 );
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: virtual ~workerThread();
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: bool initialize( );
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: // thread routine (platform specific)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: static void threadRoutine( LPVOID );
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: // call this from your app thread to delegate to the worker.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: // it will not return until your pointer-to-function has been
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: // called with the given parameter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: bool delegateSynchronous( void (*pfn)(void *), void *parameter );
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: //
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: // call this from your app thread to delegate to the worker
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: // asynchronously. Since it returns immediately, you must call
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: // waitAll later
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: bool delegateAsynchronous( void (*pfn)(void *), void *parameter );
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: static bool waitAll( workerThread *p, size_t N );
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: A.3\. Driver API Facilities
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`chDrv.h` contains some useful facilities for driver API developers: The `chCUDADevice`
    class, shown in [Listing A.2](app01.html#app01lis02), simplifies management of
    devices and contexts. Its `loadModuleFromFile` method simplifies the creation
    of a module from a `.cubin` or `.ptx` file.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the `chGetErrorString()` function passes back a read-only string
    corresponding to an error value. Besides implementing this function declared in
    `chDrv.h` for the driver API’s `CUresult` type, a specialization of `chGetErrorString()`
    also wraps the CUDA runtime’s `cudaGetErrorString()` function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing A.2.* chCUDADevice class.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#papp_apro02a)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: class chCUDADevice
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'public:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: chCUDADevice();
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: virtual ~chCUDADevice();
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: CUresult Initialize(
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: int ordinal,
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: list<string>& moduleList,
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int Flags = 0,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int numOptions = 0,
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: CUjit_option *options = NULL,
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: void **optionValues = NULL );
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: CUresult loadModuleFromFile(
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: CUmodule *pModule,
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: string fileName,
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int numOptions = 0,
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: CUjit_option *options = NULL,
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: void **optionValues = NULL );
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: CUdevice device() const { return m_device; }
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: CUcontext context() const { return m_context; }
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: CUmodule module( string s ) const { return (*m_modules.find(s)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: second; }
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'private:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: CUdevice m_device;
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: CUcontext m_context;
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: map<string, CUmodule> m_modules;
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: A.4\. Shmoos
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A “shmoo plot” refers to a graphical display of test circuit patterns as two
    inputs (such as voltage and clock rate) vary. When writing code to identify the
    optimal blocking parameters for various kernels, it is useful to do similar tests
    by varying inputs such as the threadblock size and loop unroll factor. [Listing
    A.3](app01.html#app01lis03) shows the `chShmooRange` class, which encapsulates
    a parameter range, and the `chShmooIterator` class, which enables `for` loops
    to easily iterate over a given range.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing A.3.* chShmooRange and chShmooIterator classes.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#papp_apro03a)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: class chShmooRange {
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'public:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: chShmooRange( ) { }
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: void Initialize( int value );
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: bool Initialize( int min, int max, int step );
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: bool isStatic() const { return m_min==m_max; }
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: friend class chShmooIterator;
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: int min() const { return m_min; }
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: int max() const { return m_max; }
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'private:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: bool m_initialized;
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: int m_min, m_max, m_step;
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: class chShmooIterator
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'public:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: chShmooIterator( const chShmooRange& range );
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: int operator *() const { return m_i; }
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: operator bool() const { return m_i <= m_max; }
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: void operator++(int) { m_i += m_step; };
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'private:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: int m_i;
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: int m_max;
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: int m_step;
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'The command line parser also includes a specialization that creates a `chShmooRange`
    based on command-line parameters: Prepend “min,” “max,” and “step” onto the keyword,
    and the corresponding range will be passed back. If any of the three are missing,
    the function returns `false`. The `concurrencyKernelKernel` sample (in the `concurrency/`subdirectory),
    for example, takes measurements over ranges of stream count and clock cycle count.
    The code to extract these values from the command line is as follows.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#p476pro01a)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: chShmooRange streamsRange;
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: const int numStreams = 8;
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: if ( ! chCommandLineGet(&streamsRange, "Streams", argc, argv) ) {
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: streamsRange.Initialize( numStreams );
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: chShmooRange cyclesRange;
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: const int minCycles = 8;
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: const int maxCycles = 512;
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: const int stepCycles = 8;
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: cyclesRange.Initialize( minCycles, maxCycles, stepCycles );
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: chCommandLineGet( &cyclesRange, "Cycles", argc, argv );
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: And users can specify the parameters to the application as follows.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: concurrencyKernelKernel -- minStreams 2 --maxStreams 16 stepStreams 2
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: A.5\. Command Line Parsing
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A portable command line parsing library (only about 100 lines of C++) is in
    `chCommandLine.h`. It includes the templated function `chCommandLineGet()`, which
    passes back a variable of a given type, and `chCommandLineGetBool()`, which returns
    whether a given keyword was given in the command line.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#p476pro02a)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: template<typename T> T
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: chCommandLineGet( T *p, const char *keyword, int argc, char *argv[] );
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: As described in the previous section, a specialization of `chCommandLineGet()`
    will pass back an instance of `chShmooRange`. In order for this specialization
    to be compiled, `chShmoo.h` must be included before `chCommandLine.h`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: A.6\. Error Handling
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`chError.h` implements a set of macros that implement the `goto`-based error
    handling mechanism described in [Section 1.2.3](ch01.html#ch01lev2sec3). These
    macros do the following.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: • Assign the return value to a variable called `status`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: • Check `status` for success and, if in debug mode, report the error to `stderr`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: • If `status` contains an error, `goto` a label called `Error`
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: The CUDA runtime version is as follows.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#p477pro01a)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '#ifdef DEBUG'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '#define CUDART_CHECK( fn ) do { \'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: (status) = (fn); \
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: if ( cudaSuccess != (status) ) { \
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: fprintf( stderr, "CUDA Runtime Failure (line %d of file %s):\n\t" \
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '"%s returned 0x%x (%s)\n", \'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '__LINE__, __FILE__, #fn, status, cudaGetErrorString(status) ); \'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: goto Error; \
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '} \'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '} while (0);'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '#else'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '#define CUDART_CHECK( fn ) do { \'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: status = (fn); \
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: if ( cudaSuccess != (status) ) { \
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: goto Error; \
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '} \'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '} while (0);'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '#endif'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The `do..while` is a C programming idiom, commonly used in macros, that causes
    the macro invocation to evaluate to a single statement. Using these macros will
    generate compile errors if either the variable `status` or the label `Error:`
    is not defined.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: One implication of using `goto` is that all variables must be declared at the
    top of the block. Otherwise, some compilers generate errors because the `goto`
    statements can bypass initialization. When that happens, the variables being initialized
    must be moved above the first `goto` or moved into a basic block so the `goto`
    is outside their scope.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing A.4](app01.html#app01lis04) gives an example function that follows
    the idiom. The return value and intermediate resources are initialized to values
    that can be dealt with by the cleanup code. In this case, all of the resources
    allocated by the function also are freed by the function, so the cleanup code
    and error handling code are the same. Functions that will only free some of the
    resources they allocate must implement the success and failure cases in separate
    blocks of code.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing A.4.* Example of `goto`-based error handling.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here to view code image](app01_images.html#papp_apro04a)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: double
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: TimedReduction(
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: int *answer, const int *deviceIn, size_t N,
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: int cBlocks, int cThreads,
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: pfnReduction hostReduction
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: double ret = 0.0;
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: int *deviceAnswer = 0;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: int *partialSums = 0;
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: cudaEvent_t start = 0;
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: cudaEvent_t stop = 0;
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: cudaError_t status;
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaMalloc( &deviceAnswer, sizeof(int) ) );
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaMalloc( &partialSums, cBlocks*sizeof(int) ) );
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaEventCreate( &start ) );
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaEventCreate( &stop ) );
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaThreadSynchronize() );
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaEventRecord( start, 0 ) );
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: hostReduction(
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: deviceAnswer,
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: partialSums,
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: deviceIn,
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: N,
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: cBlocks,
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: cThreads );
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaEventRecord( stop, 0 ) );
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: CUDART_CHECK( cudaMemcpy(
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: answer,
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: deviceAnswer,
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: sizeof(int),
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: cudaMemcpyDeviceToHost ) );
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: ret = chEventBandwidth( start, stop, N*sizeof(int) ) /
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: powf(2.0f,30.0f);
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: // fall through to free resources before returning
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Error:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: cudaFree( deviceAnswer );
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: cudaFree( partialSums );
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: cudaEventDestroy( start );
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: cudaEventDestroy( stop );
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: return ret;
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL

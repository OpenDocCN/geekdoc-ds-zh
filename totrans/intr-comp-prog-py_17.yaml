- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: RANDOM WALKS AND MORE ABOUT DATA VISUALIZATION
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随机游走与数据可视化
- en: This book is about using computation to solve problems. Thus far, we have focused
    our attention on problems that can be solved by a **deterministic program**. A
    program is deterministic if whenever it is run on the same input, it produces
    the same output. Such computations are highly useful, but clearly not sufficient
    to tackle some kinds of problems. Many aspects of the world in which we live can
    be accurately modeled only as **stochastic processes**.[^(100)](#c16-fn-0001)
    A process is stochastic if its next state can depend upon some random element.
    The outcome of a stochastic process is usually uncertain. Therefore, we can rarely
    make definitive statements about what a stochastic process will do. Instead, we
    make probabilistic statements about what they might do. Much of the rest of this
    book deals with building programs that help to understand uncertain situations.
    Many of these programs will be simulation models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讲述的是如何使用计算来解决问题。到目前为止，我们关注的问题是可以通过**确定性程序**解决的问题。程序是确定性的，如果它在相同输入下运行时，产生相同输出。这种计算非常有用，但显然不足以应对某些类型的问题。我们生活的世界的许多方面只能准确地建模为**随机过程**。[^(100)](#c16-fn-0001)
    如果一个过程的下一个状态可能依赖于某个随机因素，那么它就是随机的。随机过程的结果通常是不确定的。因此，我们很少能对随机过程会做什么作出明确的陈述。相反，我们会对它们可能做什么作出概率性陈述。本书的其余部分主要讨论构建帮助理解不确定情况的程序。这些程序中的许多将是模拟模型。
- en: A simulation mimics the activity of a real system. For example, the code in
    Figure 10-11 simulates a person making a series of mortgage payments. Think of
    that code as an experimental device, called a **simulation** **model**, that provides
    useful information about the possible behaviors of the system being modeled. Among
    other things, simulations are widely used to predict a future state of a physical
    system (e.g., the temperature of the planet `50` years from now), and in lieu
    of real-world experiments that would be too expensive, time consuming, or dangerous
    to perform (e.g., the impact of a change in the tax code).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟模仿真实系统的活动。例如，图10-11中的代码模拟了一个人进行一系列按揭付款。可以将这段代码视为一种实验设备，称为**模拟** **模型**，它提供有关所建模系统可能行为的有用信息。除此之外，模拟通常用于预测物理系统的未来状态（例如，`50`年后地球的温度），并代替那些进行成本过高、耗时或危险的真实世界实验（例如，税法变化的影响）。
- en: It is important to always remember that simulation models, like all models,
    are only an approximation of reality. We can never be sure that the actual system
    will behave in the way predicted by the model. In fact, we can usually be pretty
    confident that the actual system will not behave exactly as predicted by the model.
    For example, not every borrower will make all mortgage payments on time. It is
    a commonly quoted truism that “all models are wrong, but some are useful.” [^(101)](#c16-fn-0002)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要始终记住，模拟模型和所有模型一样，仅仅是对现实的近似。我们永远无法确定实际系统是否会按照模型预测的方式表现。事实上，我们通常相当自信地认为实际系统不会完全按模型预测的方式表现。例如，并不是每个借款人都会按时支付所有的按揭款。常言道：“所有模型都是错误的，但有些是有用的。” [^(101)](#c16-fn-0002)
- en: 16.1 Random Walks
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.1 随机游走
- en: In 1827, the Scottish botanist Robert Brown observed that pollen particles suspended
    in water seemed to float around at random. He had no plausible explanation for
    what came to be known as Brownian motion, and made no attempt to model it mathematically.[^(102)](#c16-fn-0003)
    A clear mathematical model of the phenomenon was first presented in 1900 in Louis
    Bachelier's doctoral thesis, *The Theory of Speculation*. However, since this
    thesis dealt with the then disreputable problem of understanding financial markets,
    it was largely ignored by respectable academics. Five years later, a young Albert
    Einstein brought this kind of stochastic thinking to the world of physics with
    a mathematical model almost the same as Bachelier's and a description of how it
    could be used to confirm the existence of atoms.[^(103)](#c16-fn-0004) For some
    reason, people seemed to think that understanding physics was more important than
    making money, and the world started paying attention. Times were certainly different.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1827年，苏格兰植物学家罗伯特·布朗观察到悬浮在水中的花粉颗粒似乎在随机漂浮。他对后来的布朗运动没有合理的解释，也没有试图从数学上进行建模。[^(102)](#c16-fn-0003)
    1900年，路易斯·巴歇利耶在其博士论文*投机理论*中首次提出了这一现象的清晰数学模型。然而，由于该论文涉及当时不光彩的金融市场理解问题，因此被主流学术界大多忽视。五年后，年轻的阿尔伯特·爱因斯坦将这种随机思维带入物理学界，提出了几乎与巴歇利耶的模型相同的数学模型，并描述了如何利用该模型确认原子的存在。[^(103)](#c16-fn-0004)
    不知为何，人们似乎认为理解物理学比赚钱更重要，因此世界开始关注这方面。那时的时代确实不同。
- en: Brownian motion is an example of a **random walk**. Random walks are widely
    used to model physical processes (e.g., diffusion), biological processes (e.g.,
    the kinetics of displacement of RNA from heteroduplexes by DNA), and social processes
    (e.g., movements of the stock market).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 布朗运动是**随机漫步**的一个例子。随机漫步广泛用于模拟物理过程（例如扩散）、生物过程（例如DNA对异源双链RNA位移的动力学）和社会过程（例如股市的运动）。
- en: 'In this chapter we look at random walks for three reasons:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们出于三个原因研究随机漫步：
- en: Random walks are intrinsically interesting and widely used.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机漫步本身具有内在趣味性，且应用广泛。
- en: They provide us with a good example of how to use abstract data types and inheritance
    to structure programs in general and simulation models in particular.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们为我们提供了一个良好的示例，说明如何使用抽象数据类型和继承来构建一般程序，尤其是模拟模型。
- en: They provide an opportunity to introduce a few more features of Python and to
    demonstrate some additional techniques for producing plots.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些提供了引入Python更多特性和展示一些额外绘图技巧的机会。
- en: 16.2 The Drunkard's Walk
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.2 醉汉的漫步
- en: Let's look at a random walk that actually involves walking. A drunken farmer
    is standing in the middle of a field, and every second the farmer takes one step
    in a random direction. What is her (or his) expected distance from the origin
    in `1000` seconds? If she takes many steps, is she likely to move ever farther
    from the origin, or is she more likely to wander back to the origin over and over,
    and end up not far from where she started? Let's write a simulation to find out.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个实际上涉及走动的随机漫步。一个醉汉农民站在田地中央，每秒钟随机朝一个方向迈出一步。她（或他）在`1000`秒后与原点的预期距离是多少？如果她走了很多步，是否更可能离原点越来越远，还是更可能一次又一次地徘徊回到原点，最终不远离起点？让我们写一个模拟来找出答案。
- en: Before starting to design a program, it is always a good idea to try to develop
    some intuition about the situation the program is intended to model. Let's start
    by sketching a simple model of the situation using Cartesian coordinates. Assume
    that the farmer is standing in a field where the grass has, mysteriously, been
    cut to resemble a piece of graph paper. Assume further that each step the farmer
    takes is of length one and is parallel to either the x-axis or y-axis.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始设计程序之前，尝试对程序所要模拟的情况发展一些直觉总是个好主意。让我们先使用笛卡尔坐标系勾勒出一个简单的模型。假设农民正站在一片田地中，草神秘地被修剪成类似于方格纸的形状。进一步假设，农民每走一步的长度为一，并且与x轴或y轴平行。
- en: The picture on the left of [Figure 16-1](#c16-fig-0001) depicts a farmer[^(104)](#c16-fn-0005)
    standing in the middle of the field. The smiley faces indicate all the places
    the farmer might be after one step. Notice that after one step she is always exactly
    one unit away from where she started. Let's assume that she wanders eastward from
    her initial location on her first step. How far away might she be from her initial
    location after her second step?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-1](#c16-fig-0001)左侧的图片描绘了一个站在田野中间的农夫[^(104)](#c16-fn-0005)。微笑脸表示农夫在一步之后可能到达的所有地方。请注意，在一步之后，她始终离起始点恰好一单位。假设她在第一步时朝东从她的初始位置游荡。她在第二步之后可能离她的初始位置有多远？'
- en: '![c16-fig-0001.jpg](../images/c16-fig-0001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0001.jpg](../images/c16-fig-0001.jpg)'
- en: '[Figure 16-1](#c16-fig-0001a) An unusual farmer'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-1](#c16-fig-0001a) 一个不寻常的农夫'
- en: Looking at the smiley faces in the picture on the right, we see that with a
    probability of `0.25` she will be `0` units away, with a probability of `0.25`
    she will be `2` units away, and with a probability of `0.5` she will be ![c16-fig-5001.jpg](../images/c16-fig-5001.jpg)
    units away.[^(105)](#c16-fn-0006) So, on average she will be farther away after
    two steps than after one step. What about the third step? If the second step is
    to the top or bottom smiley face, the third step will bring the farmer closer
    to the origin half the time and farther half the time. If the second step is to
    the left smiley face (the origin), the third step will be away from the origin.
    If the second step is to the right smiley face, the third step will be closer
    to the origin a quarter of the time, and farther away three quarters of the time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看着右侧图片中的微笑脸，我们看到她以`0.25`的概率会离原点`0`单位，以`0.25`的概率会离原点`2`单位，以`0.5`的概率会离原点![c16-fig-5001.jpg](../images/c16-fig-5001.jpg)单位。[^(105)](#c16-fn-0006)因此，平均而言，经过两步后她会比经过一步后离原点更远。第三步呢？如果第二步是到顶部或底部的微笑脸，第三步将使农夫在一半的情况下更靠近原点，而在另一半的情况下更远离。如果第二步是到左侧的微笑脸（原点），第三步将远离原点。如果第二步是到右侧的微笑脸，第三步在四分之一的时间内将更靠近原点，而在四分之三的时间内则会更远离原点。
- en: It seems as if the more steps the drunk takes, the greater the expected distance
    from the origin. We could continue this exhaustive enumeration of possibilities
    and perhaps develop a pretty good intuition about how this distance grows with
    respect to the number of steps. However, it is getting tedious, so it seems like
    a better idea to write a program to do it for us.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来醉汉走的步数越多，预期离原点的距离就越大。我们可以继续这种可能性的详尽枚举，也许可以很好地直观理解这种距离是如何随着步数的增加而增长的。然而，这变得有些繁琐，因此写一个程序来为我们完成这项工作似乎是个更好的主意。
- en: Let's begin the design process by thinking about some data abstractions that
    are likely to be useful in building this simulation and perhaps simulations of
    other kinds of random walks. As usual, we should try to invent types that correspond
    to the kinds of things that appear in the situation we are attempting to model.
    Three obvious types are `Location`, `Field`, and `Drunk`. As we look at the classes
    providing these types, it is worthwhile to think about what each might imply about
    the kinds of simulation models they will allow us to build.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过思考一些可能在构建此模拟以及其他类型随机行走的模拟中有用的数据抽象来开始设计过程。像往常一样，我们应该尝试发明与我们试图建模的情况中出现的事物类型相对应的类型。三个显而易见的类型是`Location`、`Field`和`Drunk`。在查看提供这些类型的类时，考虑它们可能对我们能够构建的模拟模型暗示的内容是很有价值的。
- en: Let's start with `Location`, [Figure 16-2](#c16-fig-0002). This is a simple
    class, but it does embody two important decisions. It tells us that the simulation
    will involve at most two dimensions. This is consistent with the pictures above.
    Also, since the values supplied for `delta_x` and `delta_y` could be floats rather
    than integers, there is no built-in assumption in this class about the set of
    directions in which a drunk might move. This is a generalization of the informal
    model in which each step was of length one and was parallel to the x-axis or y-axis.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`Location`开始，[图 16-2](#c16-fig-0002)。这是一个简单的类，但它体现了两个重要的决策。它告诉我们模拟将最多涉及两个维度。这与上面的图片是一致的。此外，由于提供给`delta_x`和`delta_y`的值可以是浮点数而不是整数，因此这个类没有关于醉汉可能移动的方向集合的内置假设。这是对非正式模型的一个概括，其中每一步的长度为一，并且与x轴或y轴平行。
- en: Class `Field`, [Figure 16-2](#c16-fig-0002), is also quite simple, but it too
    embodies notable decisions. It simply maintains a mapping of drunks to locations.
    It places no constraints on locations, so presumably a `Field` is of unbounded
    size. It allows multiple drunks to be added into a `Field` at random locations.
    It says nothing about the patterns in which drunks move, nor does it prohibit
    multiple drunks from occupying the same location or moving through spaces occupied
    by other drunks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Field`，[图16-2](#c16-fig-0002)，也相当简单，但它同样体现了一些显著的决策。它只是维护了醉汉与位置的映射。它对位置没有任何限制，因此可以推测`Field`是无限大小的。它允许多个醉汉随机添加到`Field`中的任意位置。它没有对醉汉的移动模式做出任何说明，也不禁止多个醉汉占据同一位置或穿过其他醉汉占据的空间。
- en: '![c16-fig-0002.jpg](../images/c16-fig-0002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0002.jpg](../images/c16-fig-0002.jpg)'
- en: '[Figure 16-2](#c16-fig-0002a) `Location` and `Field` classes'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-2](#c16-fig-0002a) `Location`和`Field`类'
- en: The classes `Drunk` and `Usual_drunk` in [Figure 16-3](#c16-fig-0003) define
    ways in which a drunk might wander through the field. In particular, the value
    of `step_choices` in `Usual_drunk` introduces the restriction that each step is
    of length one and is parallel to either the x-axis or y-axis. Since the function
    `random.choice` returns a randomly chosen member of the sequence that it is passed,
    each kind of step is equally likely and not influenced by previous steps. Later
    we will look at subclasses of `Drunk` with different kinds of behaviors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-3](#c16-fig-0003)中的`Drunk`和`Usual_drunk`类定义了醉汉在场地上漫游的方式。特别是，`Usual_drunk`中`step_choices`的值引入了每一步的长度为一且平行于x轴或y轴的限制。由于函数`random.choice`返回传入序列中随机选择的成员，因此每种步伐的可能性是相等的，并且不受之前步伐的影响。稍后我们将查看具有不同行为的`Drunk`子类。'
- en: '![c16-fig-0003.jpg](../images/c16-fig-0003.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0003.jpg](../images/c16-fig-0003.jpg)'
- en: '[Figure 16-3](#c16-fig-0003a) Classes defining Drunks'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-3](#c16-fig-0003a) 定义醉汉的类'
- en: The next step is to use these classes to build a simulation that answers the
    original question. [Figure 16-4](#c16-fig-0004) contains three functions used
    in this simulation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用这些类构建一个模拟，以回答最初的问题。[图16-4](#c16-fig-0004)包含用于此模拟的三个函数。
- en: '![c16-fig-0004.jpg](../images/c16-fig-0004.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0004.jpg](../images/c16-fig-0004.jpg)'
- en: '[Figure 16-4](#c16-fig-0004a) The drunkard''s walk (with a bug)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-4](#c16-fig-0004) 醉汉的行走（带有错误）'
- en: The function `walk` simulates one walk of `num_steps` steps. The function `sim_walks`
    calls `walk` to simulate `num_trials` walks of `num_steps` steps each. The function
    `drunk_test` calls `sim_walks` to simulate walks of varying lengths.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`walk`模拟一次`num_steps`步的行走。函数`sim_walks`调用`walk`模拟`num_trials`次每次`num_steps`步的行走。函数`drunk_test`调用`sim_walks`以模拟不同长度的行走。
- en: The parameter `d_class` of `sim_walks` is of type `class`, and is used in the
    first line of code to create a `Drunk` of the appropriate subclass. Later, when
    `drunk.take_step` is invoked from `Field.move_drunk`, the method from the appropriate
    subclass is automatically selected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`sim_walks`的参数`d_class`是`class`类型，并在代码的第一行用于创建适当子类的`Drunk`。稍后，当`drunk.take_step`从`Field.move_drunk`调用时，将自动选择适当子类的方法。'
- en: The function `drunk_test` also has a parameter, `d_class`, of type `class`.
    It is used twice, once in the call to `sim_walks` and once in the first `print`
    statement. In the `print` statement, the built-in `class` attribute `__name__`
    is used to get a string with the name of the class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`drunk_test`还有一个参数`d_class`，类型为`class`。它被使用了两次，一次在调用`sim_walks`时，另一次在第一个`print`语句中。在`print`语句中，内置的`class`属性`__name__`用于获取类名的字符串。
- en: When we executed `drunk_test((10, 100, 1000, 10000), 100, Usual_drunk)`, it
    printed
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行`drunk_test((10, 100, 1000, 10000), 100, Usual_drunk)`时，它打印了
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is surprising, given the intuition we developed earlier that the mean distance
    should grow with the number of steps. It could mean that our intuition is wrong,
    or it could mean that our simulation is buggy, or both.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这令人惊讶，因为我们之前形成的直觉是，平均距离应该随着步数的增加而增加。这可能意味着我们的直觉是错误的，或者可能意味着我们的模拟有问题，或者两者都有。
- en: The first thing to do at this point is to run the simulation on values for which
    we already think we know the answer, and make sure that what the simulation produces
    matches the expected result. Let's try walks of zero steps (for which the mean,
    minimum and maximum distances from the origin should all be `0`) and one step
    (for which the mean, minimum and maximum distances from the origin should all
    be `1`).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的第一步是对我们已经认为知道答案的值运行模拟，确保模拟产生的结果与预期结果匹配。我们来试试零步数的步行（对于它，离原点的平均、最小和最大距离都应该是`0`）和一步的步行（对于它，离原点的平均、最小和最大距离都应该是`1`）。
- en: When we ran `drunk_test((0,1), 100, Usual_drunk)`, we got the highly suspect
    result
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`drunk_test((0,1), 100, Usual_drunk)`时，得到了高度可疑的结果
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How on earth can the mean distance of a walk of zero steps be over `8`? We must
    have at least one bug in our simulation. After some investigation, the problem
    is clear. In `sim_walks`, the function call `walk(f, Homer, num_trials)` should
    have been `walk(f, Homer, num_steps)`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 零步数的步行的平均距离怎么可能超过`8`？我们的模拟中肯定有至少一个错误。经过一些调查，问题变得清楚。在`sim_walks`中，函数调用`walk(f,
    Homer, num_trials)`应该是`walk(f, Homer, num_steps)`。
- en: 'The moral here is an important one: Always bring some skepticism to bear when
    looking at the results of a simulation. First ask if the results pass the smell
    test (i.e., are plausible). And always **smoke test**[^(106)](#c16-fn-0007) the
    simulation on parameters for which you have a strong intuition about what the
    results should be.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的道德非常重要：在查看模拟结果时，始终保持一些怀疑态度。首先要问结果是否合理（即，看起来可信）。并始终对你对结果有强烈直觉的参数进行**烟雾测试**[^(106)](#c16-fn-0007)。
- en: 'When the corrected version of the simulation is run on our two simple cases,
    it yields exactly the expected answers:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当纠正后的模拟在我们的两个简单案例中运行时，得到了完全预期的结果：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When run on longer walks it printed
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当在更长的步行中运行时，它打印出
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As anticipated, the mean distance from the origin grows with the number of steps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，离原点的平均距离随着步数的增加而增长。
- en: Now let's look at a plot of the mean distances from the origin, [Figure 16-5](#c16-fig-0005).
    To give a sense of how fast the distance is growing, we have placed on the plot
    a line showing the square root of the number of steps (and increased the number
    of steps to `100,000`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看从原点的平均距离的图表，[图16-5](#c16-fig-0005)。为了展示距离增长的速度，我们在图上绘制了一条显示步数平方根的线（并将步数增加到`100,000`）。
- en: '![c16-fig-0005.jpg](../images/c16-fig-0005.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0005.jpg](../images/c16-fig-0005.jpg)'
- en: '[Figure 16-5](#c16-fig-0005a) Distance from starting point versus steps taken'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-5](#c16-fig-0005a) 从起点到已走步数的距离'
- en: '**Finger exercise:** Write code to produce the plot in [Figure 16-5](#c16-fig-0005).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**指尖练习：** 编写代码生成[图16-5](#c16-fig-0005)中的图表。'
- en: Does this plot provide any information about the expected final location of
    a drunk? It does tell us that on average the drunk will be somewhere on a circle
    with its center at the origin and with a radius equal to the expected distance
    from the origin. However, it tells us little about where we might actually find
    the drunk at the end of any particular walk. We return to this topic in the next
    section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表是否提供了关于醉汉最终可能位置的任何信息？它确实告诉我们，平均而言，醉汉会在一个以原点为中心，半径等于预期距离的圆上。然而，它对于我们在任何特定步行结束时可能找到醉汉的具体位置几乎没有提供信息。我们将在下一节回到这个话题。
- en: 16.3 Biased Random Walks
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.3 偏置随机步行
- en: Now that we have a working simulation, we can start modifying it to investigate
    other kinds of random walks. Suppose, for example, that we want to consider the
    behavior of a drunken farmer in the northern hemisphere who hates the cold, and
    even in his drunken stupor is able to move twice as fast when his random movements
    take him in a southward direction. Or maybe a phototropic drunk who always moves
    towards the sun (east in the morning and west in the afternoon). These are examples
    of **biased random walks**. The walk is still stochastic, but there is a bias
    in the outcome.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个有效的模拟，可以开始修改它来研究其他类型的随机步行。例如，假设我们想考虑一个厌恶寒冷的北半球醉汉农夫的行为，即使在醉酒状态下，他在朝南方向移动时速度也会快一倍。或者可能是一个光向性醉汉，总是朝着太阳移动（早上向东，下午向西）。这些都是**偏置随机步行**的例子。步行仍然是随机的，但结果中存在偏差。
- en: '[Figure 16-6](#c16-fig-0006) defines two additional subclasses of `Drunk`.
    In each case the specialization involves choosing an appropriate value for `step_choices`.
    The function `sim_all` iterates over a sequence of subclasses of `Drunk` to generate
    information about how each kind behaves.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-6](#c16-fig-0006)定义了两个额外的`Drunk`子类。在每种情况下，专业化涉及为`step_choices`选择合适的值。函数`sim_all`迭代一系列`Drunk`子类，以生成有关每种类型行为的信息。'
- en: '![c16-fig-0006.jpg](../images/c16-fig-0006.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0006.jpg](../images/c16-fig-0006.jpg)'
- en: '[Figure 16-6](#c16-fig-0006a) Subclasses of `Drunk` base class'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-6](#c16-fig-0006a) `Drunk`基类的子类'
- en: When we ran
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行时
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: it printed
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它打印了
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It appears that our heat-seeking drunk moves away from the origin faster than
    the other two kinds of drunk. However, it is not easy to digest all of the information
    in this output. It is once again time to move away from textual output and start
    using plots.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们的热寻求醉汉比其他两种醉汉更快地远离原点。然而，消化这段输出中的所有信息并不容易。是时候远离文本输出，开始使用图表了。
- en: 'Since we are showing different kinds of drunks on the same plot, we will associate
    a distinct style with each type of drunk so that it is easy to differentiate among
    them. The style will have three aspects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在同一个图表上展示不同类型的醉汉，我们将为每种醉汉关联一种独特的样式，以便于区分。样式将具有三个方面：
- en: The color of the line and marker
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线条和标记的颜色
- en: The shape of the marker
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记的形状
- en: The kind of the line, e.g., solid or dotted.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线条的类型，例如，实线或虚线。
- en: The class `style_iterator`, [Figure 16-7](#c16-fig-0007), rotates through a
    sequence of styles defined by the argument to `style_iterator.__init__`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 类`style_iterator`，[图16-7](#c16-fig-0007)通过传递给`style_iterator.__init__`的参数旋转一系列样式。
- en: '![c16-fig-0007.jpg](../images/c16-fig-0007.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0007.jpg](../images/c16-fig-0007.jpg)'
- en: '[Figure 16-7](#c16-fig-0007a) Iterating over styles'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-7](#c16-fig-0007a) 迭代样式'
- en: The code in [Figure 16-8](#c16-fig-0008) is similar in structure to that in
    [Figure 16-4](#c16-fig-0004).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-8](#c16-fig-0008)中的代码在结构上与[图16-4](#c16-fig-0004)中的代码相似。'
- en: '![c16-fig-0008.jpg](../images/c16-fig-0008.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0008.jpg](../images/c16-fig-0008.jpg)'
- en: '[Figure 16-8](#c16-fig-0008a) Plotting the walks of different drunks'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-8](#c16-fig-0008a) 绘制不同醉汉的步态'
- en: The `print` statements in `sim_drunk` and `sim_all_plot` contribute nothing
    to the result of the simulation. They are there because this simulation can take
    a rather long time to complete, and printing an occasional message indicating
    that progress is being made can be reassuring to a user who might be wondering
    if the program is actually making progress.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`sim_drunk`和`sim_all_plot`中的`print`语句对仿真的结果没有贡献。它们的存在是因为这个仿真可能需要较长时间完成，偶尔打印一条指示进展的消息可以让用户感到安心，避免他们怀疑程序是否真的在运行。'
- en: The plot in [Figure 16-9](#c16-fig-0009) was produced by executing
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-9](#c16-fig-0009)中的图是通过执行生成的。'
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![c16-fig-0009.jpg](../images/c16-fig-0009.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0009.jpg](../images/c16-fig-0009.jpg)'
- en: '[Figure 16-9](#c16-fig-0009a) Mean distance for different kinds of drunks'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-9](#c16-fig-0009a) 不同类型醉汉的平均距离'
- en: The usual drunk and the phototropic drunk (`EW_drunk`) seem to be moving away
    from the origin at approximately the same pace, but the heat-seeking drunk (`Cold_drunk`)
    seems to be moving away orders of magnitude faster. This is interesting, since
    on average he is only moving `25%` faster (he takes, on average, five steps for
    every four taken by the others).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 普通醉汉和光向性醉汉（`EW_drunk`）似乎以大约相同的速度远离原点，但热寻求醉汉（`Cold_drunk`）似乎远离的速度要快几个数量级。这很有趣，因为平均而言，他只比其他人快`25%`（他每四步平均走五步）。
- en: Let's construct a different plot to help us get more insight into the behavior
    of these three classes. Instead of plotting the change in distance over time for
    an increasing number of steps, the code in [Figure 16-10](#c16-fig-0010) plots
    the distribution of final locations for a single number of steps.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个不同的图表，以帮助我们更深入地了解这三个类的行为。代码在[图16-10](#c16-fig-0010)中绘制了单步数的最终位置分布，而不是随着步数增加绘制距离随时间的变化。
- en: '![c16-fig-0010.jpg](../images/c16-fig-0010.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0010.jpg](../images/c16-fig-0010.jpg)'
- en: '[Figure 16-10](#c16-fig-0010a) Plotting final locations'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-10](#c16-fig-0010a) 绘制最终位置'
- en: The first thing `plot_locs` does is create an instance of `style_iterator` with
    three styles of markers. It then uses `plt.plot` to place a marker at a location
    corresponding to the end of each trial. The call to `plt.plot` sets the color
    and shape of the marker to be plotted using the values returned by the iterator
    `style_iterator`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot_locs`的第一个操作是创建一个`style_iterator`实例，该实例有三种样式的标记。然后它使用`plt.plot`在每次试验结束时对应的位置放置标记。对`plt.plot`的调用设置了标记的颜色和形状，使用了`style_iterator`返回的值。'
- en: The call `plot_locs((Usual_drunk, Cold_drunk, EW_drunk), 100, 200)` produces
    the plot in [Figure 16-11](#c16-fig-0011).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`plot_locs((Usual_drunk, Cold_drunk, EW_drunk), 100, 200)`生成了[图16-11](#c16-fig-0011)中的图。
- en: '![c16-fig-0011.jpg](../images/c16-fig-0011.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0011.jpg](../images/c16-fig-0011.jpg)'
- en: '[Figure 16-11](#c16-fig-0011a) Where the drunk stops'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-11](#c16-fig-0011a) 醉汉停下的地方'
- en: The first thing to say is that our drunks seem to be behaving as advertised.
    The `EW_drunk` ends up on the x-axis, the `Cold_drunk` seem to have made progress
    southwards, and the `Usual_drunk` seem to have wandered aimlessly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要说的是，我们的醉汉似乎表现如预期。`EW_drunk`最终位于x轴上，`Cold_drunk`似乎向南推进，而`Usual_drunk`则显得漫无目的。
- en: But why do there appear to be far fewer circle markers than triangle or + markers?
    Because many of the `EW_drunk`'s walks ended up at the same place. This is not
    surprising, given the small number of possible endpoints (`200`) for the `EW_drunk`.
    Also the circle markers seem to be fairly uniformly spaced across the x-axis.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么圆形标记似乎比三角形或+标记少得多呢？因为许多`EW_drunk`的行走最终到达了同一个地方。这并不令人惊讶，考虑到`EW_drunk`可能的终点数量只有`200`。而且，圆形标记在x轴上似乎分布相对均匀。
- en: It is still not immediately obvious, at least to us, why the `Cold_drunk` manages,
    on average, to get so much farther from the origin than the other kinds of drunks.
    Perhaps it's time to look not at the endpoints of many walks, but at the path
    followed by a single walk. The code in [Figure 16-12](#c16-fig-0012) produces
    the plot in [Figure 16-13](#c16-fig-0013).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 至少对我们来说，`Cold_drunk`为什么在平均情况下能比其他类型的醉汉走得更远，这一点仍然不是显而易见的。也许是时候关注一条单一行走的路径，而不是许多行走的终点。
    [图16-12](#c16-fig-0012)中的代码生成了[图16-13](#c16-fig-0013)中的图。
- en: '![c16-fig-0012.jpg](../images/c16-fig-0012.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0012.jpg](../images/c16-fig-0012.jpg)'
- en: '[Figure 16-12](#c16-fig-0012a) Tracing walks'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-12](#c16-fig-0012a) 行走轨迹追踪'
- en: '![c16-fig-0013.jpg](../images/c16-fig-0013.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0013.jpg](../images/c16-fig-0013.jpg)'
- en: '[Figure 16-13](#c16-fig-0013a) Trajectory of walks'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-13](#c16-fig-0013a) 行走轨迹'
- en: Since the walk is `200` steps long and the `EW_drunk`'s walk visits fewer than
    `30` different locations, it's clear that he is spending a lot of time retracing
    his steps. The same kind of observation holds for the `Usual_drunk`. In contrast,
    while the `Cold_drunk` is not exactly making a beeline for Florida, he is managing
    to spend relatively less time visiting places he has already been.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于行走长度为`200`步，而`EW_drunk`的行走访问了不到`30`个不同的位置，因此显然他花费了很多时间在回溯自己的步骤上。对于`Usual_drunk`也是如此。相比之下，虽然`Cold_drunk`并不是直奔佛罗里达，但他相对花费更少的时间去访问他已经去过的地方。
- en: 'None of these simulations is interesting in its own right. (In Chapter 18,
    we will look at more intrinsically interesting simulations.) But there are some
    points worth taking away:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模拟本身并没有什么有趣之处。（在第18章中，我们将关注更内在有趣的模拟。）但有几点值得注意：
- en: Initially we divided our simulation code into four separate chunks. Three of
    them were classes (`Location`, `Field`, and `Drunk`) corresponding to abstract
    data types that appeared in the informal description of the problem. The fourth
    chunk was a group of functions that used these classes to perform a simple simulation.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起初，我们将模拟代码分为四个独立的部分。其中三个是类（`Location`、`Field`和`Drunk`），对应于问题非正式描述中出现的抽象数据类型。第四部分是一组函数，这些函数使用这些类执行简单的模拟。
- en: We then elaborated `Drunk` into a hierarchy of classes so that we could observe
    different kinds of biased random walks. The code for `Location` and `Field` remained
    untouched, but the simulation code was changed to iterate through the different
    subclasses of `Drunk`. In doing this, we took advantage of the fact that a class
    is itself an object, and therefore can be passed as an argument.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们随后将`Drunk`详细划分为一个类的层次结构，以便观察不同类型的偏向随机行走。`Location`和`Field`的代码保持不变，但模拟代码被更改为迭代`Drunk`的不同子类。在此过程中，我们利用了类本身是一个对象，因此可以作为参数传递的事实。
- en: Finally, we made a series of incremental changes to the simulation that did
    not involve any changes to the classes representing the abstract types. These
    changes mostly involved introducing plots designed to provide insight into the
    different walks. This is typical of the way in which simulations are developed.
    Get the basic simulation working first, and then start adding features.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们对模拟进行了一系列渐进的更改，而没有涉及表示抽象类型的类的任何变化。这些更改主要涉及引入旨在提供对不同游走的洞察的图表。这是模拟开发的典型方式。首先让基本模拟工作，然后再开始添加功能。
- en: 16.4 Treacherous Fields
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.4 危险场
- en: Did you ever play the board game known as *Chutes and Ladders* in the U.S. and
    *Snakes and Ladders* in the UK? This children's game originated in India (perhaps
    in the second century BCE), where it was called *Moksha-patamu*. Landing on a
    square representing virtue (e.g., generosity) sent a player up a ladder to a higher
    tier of life. Landing on a square representing evil (e.g., lust), sent a player
    back to a lower tier of life.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否玩过在美国被称为*滑梯与梯子*、在英国被称为*蛇与梯子*的桌面游戏？这个儿童游戏起源于印度（可能是在公元前二世纪），当时称为*Moksha-patamu*。落在代表美德（例如，慷慨）的方块上，会让玩家爬上梯子，进入更高的生活层次。落在代表邪恶（例如，欲望）的方块上，则会将玩家送回更低的生活层次。
- en: We can easily add this kind of feature to our random walks by creating a `Field`
    with wormholes,[^(107)](#c16-fn-0008) as shown in [Figure 16-14](#c16-fig-0014),
    and replacing the second line of code in the function `trace_walk` by the line
    of code
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个带有虫洞的`Field`轻松地为我们的随机游走添加这种特性，[^(107)](#c16-fn-0008)，如[图 16-14](#c16-fig-0014)所示，并将函数`trace_walk`中的第二行代码替换为
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In an `Odd_field`, a drunk who steps into a wormhole location is transported
    to the location at the other end of the wormhole.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Odd_field`中，走入虫洞位置的醉汉会被传送到虫洞另一端的位置。
- en: '![c16-fig-0014.jpg](../images/c16-fig-0014.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0014.jpg](../images/c16-fig-0014.jpg)'
- en: '[Figure 16-14](#c16-fig-0014a) Fields with strange properties'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-14](#c16-fig-0014a) 具有奇怪属性的场'
- en: When we ran `trace_walk((Usual_drunk, Cold_drunk, EW_drunk), 500)`, we got the
    rather odd-looking plot in [Figure 16-15](#c16-fig-0015).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`trace_walk((Usual_drunk, Cold_drunk, EW_drunk), 500)`时，得到了[图 16-15](#c16-fig-0015)中相当奇怪的图。
- en: '![c16-fig-0015.jpg](../images/c16-fig-0015.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![c16-fig-0015.jpg](../images/c16-fig-0015.jpg)'
- en: '[Figure 16-15](#c16-fig-0015a) A strange walk'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-15](#c16-fig-0015a) 奇怪的游走'
- en: 'Clearly changing the properties of the field has had a dramatic effect. However,
    that is not the point of this example. The main points are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，更改场的属性产生了显著效果。然而，这并不是本示例的重点。主要观点是：
- en: Because of the way we structured our code, it was easy to accommodate a significant
    change to the situation being modeled. Just as we could add different kinds of
    drunks without touching `Field`, we can add a new kind of `Field` without touching
    `Drunk` or any of its subclasses. (Had we been sufficiently prescient to make
    the field a parameter of `trace_walk`, we wouldn't have had to change `trace_walk`
    either.)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们代码的结构方式，适应被建模情况的重大变化变得容易。正如我们可以添加不同类型的醉汉而不触动`Field`一样，我们也可以添加一种新的`Field`而不触动`Drunk`或其任何子类。（如果我们足够有远见，将场作为`trace_walk`的参数，我们就不必更改`trace_walk`了。）
- en: While it would have been feasible to analytically derive different kinds of
    information about the expected behavior of the simple random walk and even the
    biased random walks, it would have been challenging to do so once the wormholes
    were introduced. Yet it was exceedingly simple to change the simulation to model
    the new situation. Simulation models often enjoy this advantage relative to analytic
    models.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管可以从分析上推导出简单随机游走甚至有偏随机游走的预期行为的不同信息，但一旦引入虫洞，这就变得很具挑战性。然而，改变模拟以适应新情况却极为简单。模拟模型通常相对于分析模型享有这一优势。
- en: 16.5 Terms Introduced in Chapterdeterministic program
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.5 在章节中引入的术语确定性程序
- en: stochastic process
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机过程
- en: simulation model
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟模型
- en: random walk
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机游走
- en: smoke test
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烟雾测试
- en: biased random walks
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有偏随机游走
- en: logarithmic scale
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数尺度

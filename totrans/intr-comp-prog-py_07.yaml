- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: RECURSION AND GLOBAL VARIABLES
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 递归与全局变量
- en: You may have heard of **recursion**, and in all likelihood think of it as a
    rather subtle programming technique. That's a charming urban legend spread by
    computer scientists to make people think that we are smarter than we really are.
    Recursion is an important idea, but it's not so subtle, and it is more than a
    programming technique.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过**递归**，而且很可能把它视为一种相当微妙的编程技巧。这是计算机科学家传播的一个迷人的都市传说，让人们觉得我们比实际上聪明。递归是一个重要的概念，但并不是那么微妙，它不仅仅是一种编程技巧。
- en: As a descriptive method, recursion is widely used, even by people who would
    never dream of writing a program. Consider part of the legal code of the United
    States defining the notion of a “birthright” citizenship. Roughly speaking, the
    definition is as follows
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 递归作为一种描述性方法被广泛使用，甚至连那些从未想过写程序的人也会使用它。考虑美国法律中对“出生公民权”概念的部分定义。大致来说，定义如下
- en: Any child born inside the United States or
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在美国境内出生的任何孩子或
- en: Any child born in wedlock outside the United States, one of whose parents is
    a citizen of the United States.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在美国境外婚生的任何孩子，其中一位父母是美国公民。
- en: The first part is simple; if you are born in the United States, you are a birthright
    citizen (such as Barack Obama). If you are not born in the U.S., it depends upon
    whether your parents were U.S. citizens at the time of your birth. And whether
    your parents were U.S. citizens might depend upon whether their parents were U.S.
    citizens, and so on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个部分很简单；如果你在美国出生，你就是出生公民（例如巴拉克·奥巴马）。如果你不是在美国出生，则取决于你出生时你的父母是否是美国公民。而你的父母是否是美国公民可能还取决于他们的父母是否是美国公民，依此类推。
- en: In general, a recursive definition is made up of two parts. There is at least
    one **base case** that directly specifies the result for a special case (case
    1 in the example above), and there is at least one **recursive (inductive) case**
    (case 2 in the example above) that defines the answer in terms of the answer to
    the question on some other input, typically a simpler version of the same problem.
    It is the presence of a base case that keeps a recursive definition from being
    a circular definition.[^(39)](#c6-fn-0001)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，递归定义由两部分组成。至少有一个**基例**，直接指定特殊情况下的结果（上面示例中的情况 1），还有至少一个**递归（归纳）情况**（上面示例中的情况
    2），根据某个其他输入的答案来定义答案，通常是同一问题的简化版本。基例的存在使得递归定义不成为循环定义。[^(39)](#c6-fn-0001)
- en: The world's simplest recursive definition is probably the factorial function
    (typically written in mathematics using !) on natural numbers.[^(40)](#c6-fn-0002)
    The classic **inductive definition** is
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上最简单的递归定义可能是阶乘函数（通常在数学中用！表示）针对自然数的定义。[^(40)](#c6-fn-0002)经典的**归纳定义**是
- en: '![c6-fig-5001.jpg](../images/c6-fig-5001.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-5001.jpg](../images/c6-fig-5001.jpg)'
- en: '![c6-fig-5002.jpg](../images/c6-fig-5002.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-5002.jpg](../images/c6-fig-5002.jpg)'
- en: The first equation defines the base case. The second equation defines factorial
    for all natural numbers, except the base case, in terms of the factorial of the
    previous number.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方程定义了基例。第二个方程在前一个数字的阶乘的基础上，定义了所有自然数的阶乘，除了基例。
- en: "[Figure 6-1](#c6-fig-0003) contains both an iterative (`\uFEFFfact_iter`) and\
    \ a recursive (`\uFEFFfact_rec`) implementation of factorial."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-1](#c6-fig-0003)包含了阶乘的迭代实现（`fact_iter`）和递归实现（`fact_rec`）。'
- en: '![c6-fig-0001.jpg](../images/c6-fig-0001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0001.jpg](../images/c6-fig-0001.jpg)'
- en: '[Figure 6-1](#c6-fig-0003a) Iterative and recursive implementations of factorial'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-1](#c6-fig-0003a) 阶乘的迭代和递归实现'
- en: '[Figure 6-1](#c6-fig-0003) Iterative and recursive implementations of factorial'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-1](#c6-fig-0003) 阶乘的迭代和递归实现'
- en: This function is sufficiently simple that neither implementation is hard to
    follow. Still, the second is a more direct translation of the original recursive
    definition.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数足够简单，两个实现都不难理解。然而，第二个实现是对原始递归定义的更直接翻译。
- en: It almost seems like cheating to implement `fact_rec` by calling `fact_rec`
    from within the body of `fact_rec`. It works for the same reason that the iterative
    implementation works. We know that the iteration in `fact_iter` will terminate
    because `n` starts out positive and each time around the loop it is reduced by
    1\. This means that it cannot be greater than `1` forever. Similarly, if `fact_rec`
    is called with 1, it returns a value without making a recursive call. When it
    does make a recursive call, it always does so with a value one less than the value
    with which it was called. Eventually, the recursion terminates with the call `fact_rec(1)`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `fact_rec` 通过在 `fact_rec` 的主体中调用 `fact_rec` 似乎有些作弊。这是因为与迭代实现的工作原理相同。我们知道
    `fact_iter` 中的迭代将终止，因为 `n` 一开始为正数，并且在每次循环中减少 1。这意味着它不可能永远大于 `1`。类似地，如果 `fact_rec`
    被以 1 调用，它会返回一个值而不进行递归调用。当它进行递归调用时，它总是以一个比被调用时小 1 的值进行。最终，递归以调用 `fact_rec(1)` 终止。
- en: '**Finger exercise:** The harmonic sum of an integer, n > 0, can be calculated
    using the formula ![c6-fig-5003.jpg](../images/c6-fig-5003.jpg). Write a recursive
    function that computes this.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**手指练习：** 整数的谐波和，n > 0，可以使用公式计算 ![c6-fig-5003.jpg](../images/c6-fig-5003.jpg)。编写一个递归函数来计算这个值。'
- en: 6.1 Fibonacci Numbers
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1 斐波那契数
- en: The Fibonacci sequence is another common mathematical function that is usually
    defined recursively. “They breed like rabbits,” is often used to describe a population
    that the speaker thinks is growing too quickly. In the year 1202, the Italian
    mathematician Leonardo of Pisa, also known as Fibonacci, developed a formula to
    quantify this notion, albeit with some not terribly realistic assumptions.[^(41)](#c6-fn-0003)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列是另一种常见的数学函数，通常以递归方式定义。“它们繁殖得像兔子一样快，”通常用来描述说话者认为增长过快的人口。在 1202 年，意大利数学家比萨的莱昂纳多，即斐波那契，提出了一个公式来量化这一概念，尽管有一些并不太现实的假设。[^(41)](#c6-fn-0003)
- en: Suppose a newly born pair of rabbits, one male and one female, are put in a
    pen (or worse, released in the wild). Suppose further that the rabbits can mate
    at the age of one month (which, astonishingly, some breeds can) and have a one-month
    gestation period (which, astonishingly, some breeds do). Finally, suppose that
    these mythical rabbits never die (not a property of any known breed of rabbit),
    and that the female always produces one new pair (one male, one female) every
    month from its second month on. How many female rabbits will there be at the end
    of six months?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一对新生的兔子，一只雄性和一只雌性，被放在一个围栏里（或者更糟的是，被释放到野外）。进一步假设这些兔子在一个月大时就能交配（令人惊讶的是，某些品种可以）并且有一个月的怀孕期（令人惊讶的是，某些品种确实如此）。最后，假设这些神话中的兔子永远不会死（这不是任何已知兔子品种的特性），而且雌性兔子从第二个月开始每个月都会产下一对新兔子（一个雄性，一个雌性）。六个月结束时会有多少只雌性兔子？
- en: On the last day of the first month (call it month `0`), there will be one female
    (ready to conceive on the first day of the next month). On the last day of the
    second month, there will still be only one female (since she will not give birth
    until the first day of the next month). On the last day of the next month, there
    will be two females (one pregnant and one not). On the last day of the next month,
    there will be three females (two pregnant and one not). And so on. Let's look
    at this progression in tabular form, [Figure 6-2](#c6-fig-0004).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个月的最后一天（称之为月份 `0`），将有一只雌性兔子（准备在下一个月的第一天交配）。在第二个月的最后一天，仍然只有一只雌性兔子（因为她直到下一个月的第一天才会产仔）。在下一个月的最后一天，将会有两只雌性兔子（一只怀孕的和一只不怀孕的）。在下一个月的最后一天，将会有三只雌性兔子（两只怀孕的和一只不怀孕的）。依此类推。让我们以表格形式查看这一进程，[图
    6-2](#c6-fig-0004)。
- en: '![c6-fig-0002.jpg](../images/c6-fig-0002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0002.jpg](../images/c6-fig-0002.jpg)'
- en: '[Figure 6-2](#c6-fig-0004a) Growth in population of female rabbits'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](#c6-fig-0004) 雌性兔子数量的增长'
- en: Notice that for month `n > 1`, `females(n) = females(n‑1) + females(n-2)`. This
    is not an accident. Each female that was alive in month `n-1` will still be alive
    in month `n`. In addition, each female that was alive in month `n‑2` will produce
    one new female in month `n`. The new females can be added to the females in month
    `n-1` to get the number of females in month `n`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到对于月份 `n > 1`，`females(n) = females(n‑1) + females(n-2)`。这并不是偶然。每只在月份 `n-1`
    仍然存活的雌性将在月份 `n` 依然存活。此外，每只在月份 `n‑2` 存活的雌性将在月份 `n` 产生一只新的雌性。新的雌性可以加到月份 `n-1` 的雌性数量中，以获得月份
    `n` 的雌性数量。
- en: '[Figure 6-2](#c6-fig-0004) Growth in population of female rabbits'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](#c6-fig-0004) 雌性兔子数量的增长'
- en: The growth in population is described naturally by the **recurrence**[^(42)](#c6-fn-0004)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 人口增长自然地通过**递推**描述[^(42)](#c6-fn-0004)
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This definition is different from the recursive definition of factorial:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义与阶乘的递归定义不同：
- en: It has two base cases, not just one. In general, we can have as many base cases
    as we want.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有两个基本情况，而不仅仅是一个。一般来说，我们可以有任意多的基本情况。
- en: In the recursive case, there are two recursive calls, not just one. Again, there
    can be as many as we want.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在递归情况下，有两个递归调用，而不仅仅是一个。同样，我们可以有任意多的调用。
- en: '[Figure 6-3](#c6-fig-0005) contains a straightforward implementation of the
    Fibonacci recurrence,[^(43)](#c6-fn-0005) along with a function that can be used
    to test it.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-3](#c6-fig-0005)包含了斐波那契递推的直接实现，[^(43)](#c6-fn-0005)以及一个可以用来测试它的函数。'
- en: '![c6-fig-0003.jpg](../images/c6-fig-0003.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0003.jpg](../images/c6-fig-0003.jpg)'
- en: '[Figure 6-3](#c6-fig-0005a) Recursive implementation of Fibonacci sequence'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-3](#c6-fig-0005) 递归实现斐波那契数列'
- en: Writing the code is the easy part of solving this problem. Once we went from
    the vague statement of a problem about bunnies to a set of recursive equations,
    the code almost wrote itself. Finding some kind of abstract way to express a solution
    to the problem at hand is often the hardest step in building a useful program.
    We will talk much more about this later in the book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码是解决这个问题的简单部分。一旦我们从一个模糊的关于兔子的问题陈述转变为一组递归方程，代码几乎是自然而然地生成的。找到一种抽象的方法来表达当前问题的解决方案通常是构建一个有用程序中最困难的步骤。我们将在本书后面详细讨论这个问题。
- en: As you might guess, this is not a perfect model for the growth of rabbit populations
    in the wild. In 1859, Thomas Austin, an Australian farmer, imported 24 rabbits
    from England to be used as targets in hunts. Some escaped. Ten years later, approximately
    two million rabbits were shot or trapped each year in Australia, with no noticeable
    impact on the population. That's a lot of rabbits, but not anywhere close to the
    `120`^(th) Fibonacci numbe`r`.[^(44)](#c6-fn-0006)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，这并不是野生兔子种群增长的完美模型。在1859年，澳大利亚农民托马斯·奥斯丁从英格兰进口了24只兔子作为猎物。一些兔子逃脱。十年后，澳大利亚每年大约有两百万只兔子被射杀或捕获，对种群没有明显影响。这是很多兔子，但与`120`^(th)斐波那契数`r`相差甚远。[^(44)](#c6-fn-0006)
- en: Though the Fibonacci sequence does not actually provide a perfect model of the
    growth of rabbit populations, it does have many interesting mathematical properties.
    Fibonacci numbers are also common in nature. For example, for most flowers the
    number of petals is a Fibonacci number.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然斐波那契数列并没有提供兔子种群增长的完美模型，但它确实具有许多有趣的数学性质。斐波那契数在自然界中也很常见。例如，大多数花朵的花瓣数是斐波那契数。
- en: '**Finger exercise:** When the implementation of `fib` in [Figure 6-3](#c6-fig-0005)
    is used to compute `fib(5)`, how many times does it compute the value of `fib(2)`
    on the way to computing `fib(5)`?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**手指练习：** 当[图6-3](#c6-fig-0005)中的`fib`实现被用来计算`fib(5)`时，它在计算`fib(5)`的过程中计算了多少次`fib(2)`的值？'
- en: 6.2 Palindromes
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2 回文
- en: Recursion is also useful for many problems that do not involve numbers. [Figure
    6-4](#c6-fig-0006) contains a function, `is_palindrome,` that checks whether a
    string reads the same way backwards and forwards.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 递归对许多不涉及数字的问题也很有用。[图6-4](#c6-fig-0006)包含一个函数`is_palindrome`，它检查字符串是否正反读相同。
- en: '![c6-fig-0004.jpg](../images/c6-fig-0004.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0004.jpg](../images/c6-fig-0004.jpg)'
- en: '[Figure 6-4](#c6-fig-0006a) Palindrome testing'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-4](#c6-fig-0006a) 回文测试'
- en: The function `is_palindrome` contains two internal **helper functions**. This
    should be of no interest to clients of the function, who should care only that
    the implementation of `is_palindrome` meets its specification. But you should
    care, because there are things to learn by examining the implementation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`is_palindrome`包含两个内部**辅助函数**。这对函数的客户端没有太大兴趣，客户端只需关心`is_palindrome`的实现是否符合其规范。但你应该关心，因为通过检查实现可以学到很多东西。
- en: The helper function `to_chars` converts all letters to lowercase and removes
    all non-letters. It starts by using a built-in method on strings to generate a
    string that is identical to `s`, except that all uppercase letters have been converted
    to lowercase.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`to_chars`将所有字母转换为小写并移除所有非字母。它首先使用字符串上的内置方法生成一个与`s`相同的字符串，只是所有大写字母都被转换为小写。
- en: The helper function `is_pal` uses recursion to do the real work. The two base
    cases are strings of length zero or one. This means that the recursive part of
    the implementation is reached only on strings of length two or more. The conjunction[^(45)](#c6-fn-0007)
    in the `else` clause is evaluated from left to right. The code first checks whether
    the first and last characters are the same, and if they are, goes on to check
    whether the string minus those two characters is a palindrome. That the second
    conjunct is not evaluated unless the first conjunct evaluates to `True` is semantically
    irrelevant in this example. However, later in the book we will see examples where
    this kind of **short-circuit evaluation** of Boolean expressions is semantically
    relevant.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`is_pal`使用递归来完成实际工作。两个基本情况是长度为零或一的字符串。这意味着递归实现部分只会在长度为二或更多的字符串上被触及。在`else`子句中的连接[^(45)](#c6-fn-0007)是从左到右进行评估的。代码首先检查第一个和最后一个字符是否相同，如果相同，则继续检查去掉这两个字符的字符串是否为回文。在这个例子中，只有当第一个连接评估为`True`时，第二个连接才会被评估，这在语义上并不相关。然而，在书的后面部分，我们将看到一些例子，其中这种**短路评估**布尔表达式在语义上是相关的。
- en: This implementation of `is_palindrome` is an example of an important problem-solving
    principle known as **divide-and-conquer**. (This principle is related to but slightly
    different from divide-and-conquer algorithms, which are discussed in Chapter 12.)
    The problem-solving principle is to conquer a hard problem by breaking it into
    a set of subproblems with the properties
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`is_palindrome`的实现是一个重要问题解决原则的例子，称为**分而治之**。（这个原则与分而治之算法相关，但略有不同，后者将在第12章讨论。）这个问题解决原则是通过将一个难题拆分为一组子问题来征服一个困难的问题，具备以下属性。
- en: The subproblems are easier to solve than the original problem.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子问题比原始问题更容易解决。
- en: Solutions of the subproblems can be combined to solve the original problem.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子问题的解决方案可以结合起来解决原始问题。
- en: Divide-and-conquer is an old idea. Julius Caesar practiced what the Romans referred
    to as *divide et impera* (divide and rule). The British practiced it brilliantly
    to control the Indian subcontinent. Benjamin Franklin was well aware of the British
    expertise in using this technique, prompting him to say at the signing of the
    U.S. Declaration of Independence, “We must all hang together, or assuredly we
    shall all hang separately.”
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 分而治之是一个古老的思想。尤利乌斯·凯撒践行了罗马人所称的*divide et impera*（分而治之）。英国人巧妙地运用这一方法来控制印度次大陆。本杰明·富兰克林非常清楚英国在运用这一技术方面的专业知识，因此在美国独立宣言签署时他说：“我们必须团结一致，否则我们必将各自面对困境。”
- en: In this case, we solve the problem by breaking the original problem into a simpler
    version of the same problem (checking whether a shorter string is a palindrome)
    and a simple thing we know how to do (comparing single characters), and then combine
    the solutions with the logical operator `and`. [Figure 6-5](#c6-fig-0007) contains
    some code that can be used to visualize how this works.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们通过将原始问题拆分为一个更简单的同类问题（检查一个较短的字符串是否为回文）和一个我们知道如何处理的简单问题（比较单个字符）来解决问题，然后使用逻辑运算符`and`结合解决方案。[图
    6-5](#c6-fig-0007)包含一些可视化这一过程的代码。
- en: '![c6-fig-0005.jpg](../images/c6-fig-0005.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0005.jpg](../images/c6-fig-0005.jpg)'
- en: '[Figure 6-5](#c6-fig-0007a) Code to visualize palindrome testing'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-5](#c6-fig-0007a) 可视化回文测试的代码'
- en: Executing the code
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: prints
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打印
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 6.3 Global Variables
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.3 全局变量
- en: If you tried calling `fib` with a large number, you probably noticed that it
    took a very long time to run. Suppose we want to know how many recursive calls
    are made. We could do a careful analysis of the code and figure it out, and in
    Chapter 11 we will talk about how to do that. Another approach is to add some
    code that counts the number of calls. One way to do that uses **global variables**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试用一个大数字调用`fib`，你可能会注意到运行时间非常长。假设我们想知道进行了多少次递归调用。我们可以仔细分析代码来找出答案，在第11章中我们将讨论如何做到这一点。另一种方法是添加一些代码来计算调用次数。一种方法是使用**全局变量**。
- en: Until now, all of the functions we have written communicate with their environment
    solely through their parameters and return values. For the most part, this is
    exactly as it should be. It typically leads to programs that are relatively easy
    to read, test, and debug. Once in a while, however, global variables come in handy.
    Consider the code in [Figure 6-6](#c6-fig-0008).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所编写的所有函数仅通过其参数和返回值与环境进行通信。在大多数情况下，这正是应该的。这通常导致程序相对容易阅读、测试和调试。然而，偶尔情况下，全局变量也会派上用场。考虑[图6-6](#c6-fig-0008)中的代码。
- en: '![c6-fig-0006.jpg](../images/c6-fig-0006.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![c6-fig-0006.jpg](../images/c6-fig-0006.jpg)'
- en: '[Figure 6-6](#c6-fig-0008a) Using a global variable'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-6](#c6-fig-0008a) 使用全局变量'
- en: In each function, the line of code `global` `num_fib_calls` tells Python that
    the name `num_fib_calls` should be defined outside of the function in which the
    line of code appears. Had we not included the code `global num_fib_calls`, the
    name `num_fib_calls` would have been local to each of the functions `fib` and
    `test_fib`, because `num_fib_calls` occurs on the left-hand side of an assignment
    statement in both `fib` and `test_fib`. The functions `fib` and `test_fib` both
    have unfettered access to the object referenced by the variable `num_fib_calls`.
    The function `test_fib` binds `num_fib_calls` to `0` each time it calls `fib`,
    and `fib` increments the value of `num_fib_calls` each time `fib` is entered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个函数中，代码行`global` `num_fib_calls`告诉Python，名称`num_fib_calls`应该在其出现的函数外部定义。如果我们没有包含代码`global
    num_fib_calls`，那么名称`num_fib_calls`将在函数`fib`和`test_fib`中是局部的，因为`num_fib_calls`在`fib`和`test_fib`的赋值语句左侧。函数`fib`和`test_fib`都可以不受限制地访问变量`num_fib_calls`所引用的对象。函数`test_fib`每次调用`fib`时都会将`num_fib_calls`绑定为`0`，而`fib`每次进入时都会递增`num_fib_calls`的值。
- en: The call `test_fib(6)` produces the output
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`test_fib(6)`会产生输出
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We introduce the topic of global variables with some trepidation. Since the
    1970s, card-carrying computer scientists have inveighed against them, for good
    reason. The indiscriminate use of global variables can lead to lots of problems.
    The key to making programs readable is locality. People read programs a piece
    at a time, and the less context needed to understand each piece, the better. Since
    global variables can be modified or read in a wide variety of places, their sloppy
    use can destroy locality. Nevertheless, there are a few times when they are just
    what is needed. The most common use of global variables is probably to define
    a **global constant** that will be used in many places. For example, someone writing
    a physics-related program might want to define the speed of light, C, once, and
    then use it in multiple functions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对全局变量这一主题的引入怀有些许忧虑。自1970年代以来，持卡计算机科学家们对它们表示反对，这一点是有充分理由的。全局变量的滥用可能导致许多问题。使程序可读的关键在于局部性。人们是逐段阅读程序的，每一段所需的上下文越少，理解就越好。由于全局变量可以在多种地方被修改或读取，它们的不当使用可能破坏局部性。然而，在某些情况下，全局变量确实是所需的。全局变量最常见的用法可能是定义一个将在多个地方使用的**全局常量**。例如，某个编写与物理相关的程序的人可能希望一次性定义光速C，然后在多个函数中使用它。
- en: 6.4 Terms Introduced in Chapter
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.4 本章介绍的术语
- en: recursion
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归
- en: base case
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本情况
- en: recursive (inductive) case
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归（归纳）情况
- en: inductive definition
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归纳定义
- en: recurrence
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归关系
- en: helper functions
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 辅助函数
- en: short-circuit evaluation
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短路求值
- en: divide-and-conquer
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分治法
- en: global variable
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量
- en: global constant
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局常量

["```py\n﻿import pandas as pd\n`﻿wwc = pd.read_csv('wwc2019_q-f.csv') print(wwc)`\n```", "```py\n﻿for i in wwc.index:\n    print(i)\n```", "```py\n﻿for c in wwc.columns:\n    print(c)\n```", "```py\n﻿Round\nWinner\nW Goals\nLoser\nL Goals\n```", "```py\n﻿[['Quarters' 'England' 3 'Norway' 0]\n ['Quarters' 'USA' 2 'France' 1]\n ['Quarters' 'Netherlands' 2 'Italy' 0]\n ['Quarters' ‘Sweden' 2 'Germany' 1]\n ['Semis' 'USA' 2 'England' 1]\n ['Semis' 'Netherlands' 1 ‘Sweden' 0]\n ['3rd Place' ‘Sweden' 2 'England' 1]\n ['Championship' 'USA' 2 'Netherlands' 0]]\n```", "```py\n﻿Empty DataFrame\nColumns: []\nIndex: []\n```", "```py\n﻿rounds = ['Semis', ‘Semis', '3rd Place', 'Championship']\nprint(pd.DataFrame(rounds))\n```", "```py\n﻿              0\n0         Semis\n1         Semis\n2     3rd Place\n3  Championship\n```", "```py\n﻿          Round\n0         Semis\n1         Semis\n2     3rd Place\n3  Championship\n```", "```py\n﻿﻿rounds = ['Semis', ‘Semis', '3rd Place', 'Championship']\nteams = ['USA', 'Netherlands', ‘Sweden', 'USA']\ndf = pd.DataFrame({'Round': rounds, 'Winner': teams})\nprint(df)\n```", "```py\n﻿          Round       Winner\n0         Semis          USA\n1         Semis  Netherlands\n2     3rd Place       Sweden\n3  Championship          USA\n```", "```py\n﻿          Round       Winner  W Goals\n0         Semis          USA        2\n1         Semis  Netherlands        1\n2     3rd Place       Sweden        0\n3  Championship          USA        0\n```", "```py\n﻿          Round       Winner  W Goals\n0         Semis          USA        2\n1         Semis  Netherlands        1\n2     3rd Place       Sweden        2\n3  Championship          USA        2\n```", "```py\n﻿          Round  W Goals\n0         Semis        2\n1         Semis        1\n2     3rd Place        2\n3  Championship        2\n```", "```py\n﻿quarters_dict = {'Round': ['Quarters']*4,\n                 'Winner': ['England', 'USA', 'Netherlands', ‘Sweden'],\n                 'W Goals': [3, 2, 2, 2]}\ndf = pd.concat([pd.DataFrame(quarters_dict), df], sort = False)\n```", "```py\n﻿          Round       Winner  W Goals\n0      Quarters      England        3\n1      Quarters          USA        2\n2      Quarters  Netherlands        2\n3      Quarters       Sweden        2\n0         Semis          USA        2\n1         Semis  Netherlands        1\n2     3rd Place       Sweden        2\n3  Championship          USA        2\n```", "```py\n﻿pd.concat([pd.DataFrame(quarters_dict), df], sort = True)\n```", "```py\n﻿          Round  W Goals       Winner\n0      Quarters        3      England\n1      Quarters        2          USA\n2      Quarters        2  Netherlands\n3      Quarters        2       Sweden\n0         Semis        2          USA\n1         Semis        1  Netherlands\n2     3rd Place        2       Sweden\n3  Championship        2          USA\n```", "```py\n﻿   ﻿          Round       Winner  W Goals\n0      Quarters      England        3\n1      Quarters          USA        2\n2      Quarters  Netherlands        2\n3      Quarters       Sweden        2\n4         Semis          USA        2\n5         Semis  Netherlands        1\n6     3rd Place       Sweden        2\n7  Championship          USA        2\n```", "```py\n﻿                   Winner  W Goals\nRound                             \nQuarters          England        3\nQuarters              USA        2\nQuarters      Netherlands        2\nQuarters           Sweden        2\nSemis                 USA        2\nSemis         Netherlands        1\n3rd Place          Sweden        2\nChampionship          USA        2\n```", "```py\n﻿﻿0        England\n1            USA\n2    Netherlands\n3         Sweden\n4            USA\n5    Netherlands\n6         Sweden\n7            USA\n```", "```py\n﻿winners = ''\nfor w in wwc['Winner']:\n    winners += w + ','\nprint(winners[:-1])\n```", "```py\n﻿        Winner        Loser\n0      England       Norway\n1          USA       France\n2  Netherlands        Italy\n3       Sweden      Germany\n4          USA      England\n5  Netherlands       Sweden\n6       Sweden      England\n7          USA  Netherlands\n```", "```py\n﻿          Round       Winner        Loser  W Goals  L Goals\n0      Quarters      England       Norway        3        0\n1      Quarters          USA       France        2        1\n2      Quarters  Netherlands        Italy        2        0\n3      Quarters       Sweden      Germany        2        1\n4         Semis          USA      England        2        1\n5         Semis  Netherlands       Sweden        1        0\n6     3rd Place       Sweden      England        2        1\n7  Championship          USA  Netherlands        2        0\n```", "```py\n Round Winner  W Goals   Loser  L Goals\n 1  Quarters    USA        2  France        1\n```", "```py\n﻿Round      Quarters\nWinner       Sweden\nW Goals           2\nLoser       Germany\nL Goals           1\n```", "```py\n﻿      Round       Winner  W Goals    Loser  L Goals\n1  Quarters          USA        2   France        1\n3  Quarters       Sweden        2  Germany        1\n5     Semis  Netherlands        1   Sweden        0\n```", "```py\n﻿          Round       Winner  W Goals        Loser  L Goals\n3      Quarters       Sweden        2      Germany        1\n5         Semis  Netherlands        1       Sweden        0\n7  Championship          USA        2  Netherlands        0\n```", "```py\n﻿          Round  Winner  W Goals        Loser  L Goals\n6     3rd Place  Sweden        2      England        1\n7  Championship     USA        2  Netherlands        0\n```", "```py\n﻿      Round       Winner  W Goals   Loser  L Goals\n0  Quarters      England        3  Norway        0\n1  Quarters          USA        2  France        1\n2  Quarters  Netherlands        2   Italy        0\n```", "```py\ndf.loc[*row_selector*, *column_selector*]\n```", "```py\n Round  W Goals  L Goals \n0  Quarters        3        0 \n1  Quarters        2        1 \n2  Quarters        2        0\n```", "```py\n Round       Winner  W Goals   Loser  L Goals\n1  Quarters          USA        2  France        1\n2  Quarters  Netherlands        2   Italy        0\n```", "```py\n﻿                   Winner  W Goals        Loser  L Goals\nRound                                                   \nQuarters          England        3       Norway        0\nQuarters              USA        2       France        1\nQuarters      Netherlands        2        Italy        0\nQuarters           Sweden        2      Germany        1\nSemis                 USA        2      England        1\nSemis         Netherlands        1       Sweden        0\n3rd Place          Sweden        2      England        1\nChampionship          USA        2  Netherlands        0\n```", "```py\n﻿﻿            Winner  W Goals    Loser  L Goals\nRound                                        \nSemis          USA        2  England        1\nSemis  Netherlands        1   Sweden        0\n```", "```py\n﻿                   Winner  W Goals        Loser  L Goals\nRound                                                   \nSemis                 USA        2      England        1\nSemis         Netherlands        1       Sweden        0\nChampionship          USA        2  Netherlands        0\n```", "```py\n`wwc_by_round.loc['Quarters':'Semis':2]`\n```", "```py\n﻿               Winner  W Goals    Loser  L Goals\nRound                                           \nQuarters      England        3   Norway        0\nQuarters  Netherlands        2    Italy        0\nSemis             USA        2  England        1\n```", "```py\n﻿grouped_by_round = wwc.groupby('Round')\n```", "```py\n﻿grouped_by_round = wwc.groupby('Round')\nprint(grouped_by_round.sum())\n```", "```py\n﻿ ﻿              W Goals  L Goals\nRound                         \n3rd Place           2        1\nChampionship        2        0\nQuarters            9        2\nSemis               3        1\n```", "```py\n﻿             W Goals   L Goals\nWinner                        \nEngland          3.0  0.000000\nNetherlands      1.5  0.000000\nSweden           2.0  1.000000\nUSA              2.0  0.666667\n```", "```py\n`﻿                          W Goals  L Goals Loser       Round                          England     3rd Place           2        1             Semis               2        1 France      Quarters            2        1 Germany     Quarters            2        1 Italy       Quarters            2        0 Netherlands Championship        2        0 Norway      Quarters            3        0 Sweden      Semis               1        0`\n```", "```py\n﻿       Round  Winner  W Goals    Loser  L Goals\n3   Quarters  Sweden        2  Germany        1\n6  3rd Place  Sweden        2  England        1\n```", "```py\n Round       Winner  W Goals    Loser  L Goals\n3   Quarters       Sweden        2  Germany        1\n5      Semis  Netherlands        1   Sweden        0\n6  3rd Place       Sweden        2  England        1\n```", "```py\n﻿ ﻿ ﻿ ﻿def get_country(df, country):\n    \"\"\"df a DataFrame with series labeled Winner and Loser\n       country a str\n       returns a DataFrame with all rows in which country appears\n       in either the Winner or Loser column\"\"\"\n    return df.loc[(df['Winner'] == country) | (df['Loser'] == country)]\n```", "```py\n﻿ ﻿ ﻿def get_games(df, countries):\n    return df[(df['Winner'].isin(countries)) |\n            (df['Loser'].isin(countries))]\n```", "```py\n﻿﻿﻿0    6\n1    4\n2    4\n3    4\n4    4\n5    2\n6    4\n7    4\n```", "```py\n﻿(wwc[wwc['Winner'] == ‘Sweden']['W Goals'].sum() +\nwwc[wwc['Winner'] == ‘Sweden']['L Goals'].sum())\n```", "```py\n`﻿(wwc['W Goals'].sum() - wwc['L Goals'].sum())/len(wwc['W Goals'])`\n```", "```py\n﻿#Add new column to wwc\nwwc['G Diff'] = wwc['W Goals'] - wwc['L Goals']\n#create a dict with values for new row\nnew_row_dict = {'Round': ['Total'],\n           'W Goals': [wwc['W Goals'].sum()],\n           'L Goals': [wwc['L Goals'].sum()],\n           'G Diff': [wwc['G Diff'].sum()]}\n#Create DataFrame from dict, then pass it to concat\nnew_row = pd.DataFrame(new_row_dict)\nwwc = pd.concat([wwc, new_row], sort = False).reset_index(drop = True)\n```", "```py\n﻿          Round       Winner  W Goals        Loser  L Goals  G Diff\n0      Quarters      England        3       Norway        0       3\n1      Quarters          USA        2       France        1       1\n2      Quarters  Netherlands        2        Italy        0       2\n3      Quarters       Sweden        2      Germany        1       1\n4         Semis          USA        2      England        1       1\n5         Semis  Netherlands        1       Sweden        0       1\n6     3rd Place       Sweden        2      England        1       1\n7  Championship          USA        2  Netherlands        0       2\n8         Total          NaN       16          NaN        4      12\n```", "```py\nprint(wwc.loc[wwc['Round'] != ‘Total'].corr(method = 'pearson'))\n```", "```py\n﻿          W Goals   L Goals    G Diff\nW Goals  1.000000  0.000000  0.707107\nL Goals  0.000000  1.000000 -0.707107\nG Diff   0.707107 -0.707107  1.000000\n```", "```py\n﻿﻿pd.set_option('display.max_rows', 6)\npd.set_option('display.max_columns', 5)\ntemperatures = pd.read_csv('US_temperatures.csv')\nprint(temperatures)\n```", "```py\n﻿           Date  Albuquerque  ...  St Louis  Tampa\n0      19610101        -0.55  ...     -0.55  15.00\n1      19610102        -2.50  ...     -0.55  13.60\n2      19610103        -2.50  ...      0.30  11.95\n        ...          ...  ...       ...    ...\n20085  20151229        -2.15  ...      1.40  26.10\n20086  20151230        -2.75  ...      0.60  25.55\n20087  20151231        -0.75  ...     -0.25  25.55\n[20088 rows x 22 columns]\n```", "```py\n﻿﻿temperatures.loc[temperatures['Date']==19790812][['New York','Tampa']]\n```", "```py\ntemperatures['Max T'] = temperatures.max(axis = 'columns')\ntemperatures['Min T'] = temperatures.min(axis = 'columns')\ntemperatures['Mean T'] = round(temperatures.mean(axis = 'columns'), 2)\nprint(temperatures.loc[20000704:20000704])\n```", "```py\n Date  Albuquerque  ...  Min T      Mean T\n```", "```py\n14429  20000704        26.65  ...  15.25  1666747.37\n```", "```py\n﻿﻿﻿temperatures.set_index('Date', drop = True, inplace = True)\ntemperatures['Max'] = temperatures.max(axis = 'columns')\ntemperatures['Min'] = temperatures.min(axis = 'columns')\ntemperatures['Mean T'] = round(temperatures.mean(axis = 'columns'), 2)\nprint(temperatures.loc[20000704:20000704])\n```", "```py\n﻿          Albuquerque  Baltimore  ...  Min T  Mean T\nDate                              ...               \n20000704        26.65      25.55  ...  15.25   24.42\n```", "```py\n﻿﻿plt.figure(figsize = (14, 3)) #set aspect ratio for figure\nplt.plot(list(temperatures['Mean T']))\nplt.title('Mean Temp Across 21 US Cities')\nplt.xlabel('Days Since 1/1/1961')\nplt.ylabel('Degrees C')\n```", "```py\n﻿          Max T  Min T  Mean T\nDate                          \n19611230  24.70 -13.35    3.35\n19611231  24.75 -10.25    5.10\n19620101  25.55 -10.00    5.70\n19620102  25.85  -4.45    6.05\n```", "```py\n﻿{'1961': {'Max T': [24.7, 24.75], 'Min T': [-13.35, -10.25], 'Mean T': [3.35, 5.1]}, '1962': {'Max T': [25.55, 25.85], 'Min T': [-10.0, -4.45], 'Mean T': [5.7, 6.05]}}\n```", "```py\n﻿    Year  Min T  Max T  Mean T\n0   1961 -17.25  38.05   15.64\n1   1962 -21.65  36.95   15.39\n2   1963 -24.70  36.10   15.50\n..   ...    ...    ...     ...\n52  2013 -15.00  40.55   16.66\n53  2014 -22.70  40.30   16.85\n54  2015 -18.80  40.55   17.54\n```", "```py\n﻿﻿﻿num_years = 7\nfor label in ['Min T', 'Max T', 'Mean T']:\n    yearly_temps[label] = yearly_temps[label].rolling(num_years).mean()\nyearly_temps['Year'] = yearly_temps['Year'].apply(int)\nprint(yearly_temps.corr())\n```", "```py\n﻿            Year     Min T     Max T    Mean T\nYear    1.000000  0.713382  0.918975  0.969475\nMin T   0.713382  1.000000  0.629268  0.680766\nMax T   0.918975  0.629268  1.000000  0.942378\nMean T  0.969475  0.680766  0.942378  1.000000\n```", "```py\n﻿﻿indices = np.isfinite(yearly_temps['Mean T'])\nmodel = np.polyfit(list(yearly_temps['Year'][indices]),\n                  list(yearly_temps['Mean T'][indices]), 1)\nprint(r_squared(yearly_temps['Mean T'][indices],\n              np.polyval(model, yearly_temps['Year'][indices])))\n```", "```py\n﻿﻿﻿﻿﻿﻿﻿﻿﻿temperatures = pd.read_csv('US_temperatures.csv')\ntemperatures.drop('Date', axis = 'columns', inplace = True)\nmeans = round(temperatures.mean(), 2)\nmaxes = temperatures.max()\nmins = temperatures.min()\ncity_temps = pd.DataFrame({'Min T':mins, 'Max T':maxes,\n                           'Mean T':means})\ncity_temps = city_temps.apply(lambda x: 1.8*x + 32)\ncity_temps['Max-Min'] = city_temps['Max T'] - city_temps['Min T']\nprint(city_temps.sort_values('Mean T', ascending = False).to_string())\n```", "```py\n﻿﻿﻿﻿﻿﻿plt.plot(city_temps.sort_values('Max-Min', ascending=False)\n        ['Max-Min'], 'o')\nplt.figure()\nplt.plot(city_temps.sort_values('Max-Min', ascending=False)['Min T'],\n        'b∧', label = 'Min T')\nplt.plot(city_temps.sort_values('Max-Min', ascending=False)['Max T'],\n        'kx', label = 'Max T')\nplt.plot(city_temps.sort_values('Max-Min', ascending=False)['Mean T'],\n        'ro', label = 'Mean T')\nplt.xticks(rotation = ‘vertical')\nplt.legend()\nplt.title('Variation in Extremal Daily\\nTemperature 1961-2015')\nplt.ylabel('Degrees F')\n```", "```py\n﻿emissions = pd.read_csv('global-fossil-fuel-consumption.csv')\nprint(emissions)\n```", "```py\n﻿    Year         Coal    Crude Oil   Natural Gas\n0   1965  16151.96017  18054.69004   6306.370076\n1   1966  16332.01679  19442.23715   6871.686791\n2   1967  16071.18119  20830.13575   7377.525476\n..   ...          ...          ...           ...\n50  2015  43786.84580  52053.27008  34741.883490\n51  2016  43101.23216  53001.86598  35741.829870\n52  2017  43397.13549  53752.27638  36703.965870\n```", "```py\n﻿emissions['Fuels'] = emissions.sum(axis = 'columns')\nemissions.drop(['Coal', 'Crude Oil', 'Natural Gas'], axis = 'columns',\n              inplace = True)\nnum_years = 5\nemissions['Roll F'] =\\\n    emissions['Fuels'].rolling(num_years).mean()\nemissions = emissions.round()\n```", "```py\n﻿plt.plot(emissions['Year'], emissions['Fuels'],\n         label = 'Consumption')\nplt.plot(emissions['Year'], emissions['Roll F'],\n         label = str(num_years) + ' Year Rolling Ave.')\nplt.legend()\nplt.title('Consumption of Fossil Fuels')\nplt.xlabel('Year')\nplt.ylabel('Consumption')\n```", "```py\n﻿    Year  Min T  Max T  Mean T\n0   1961 -17.25  38.05   15.64\n1   1962 -21.65  36.95   15.39\n2   1963 -24.70  36.10   15.50\n..   ...    ...    ...     ...\n52  2013 -15.00  40.55   16.66\n53  2014 -22.70  40.30   16.85\n54  2015 -18.80  40.55   17.54\n```", "```py\nyearly_temps['Year'] = yearly_temps['Year'].astype(int)\nmerged_df = pd.merge(yearly_temps, emissions,\n                      left_on = 'Year', right_on = 'Year')\nprint(merged_df)\n```", "```py\n﻿    Year  Min T  ...     Fuels    Roll F\n0   1965  -21.7  ...   42478.0       NaN\n1   1966  -25.0  ...   44612.0       NaN\n2   1967  -17.8  ...   46246.0       NaN\n..   ...    ...  ...       ...       ...\n48  2013  -15.0  ...  131379.0  126466.0\n49  2014  -22.7  ...  132028.0  129072.0\n50  2015  -18.8  ...  132597.0  130662.0\n```", "```py\n Year  Min T  Max T  Mean T  Fuels  Roll F\nYear    1.00   0.37   0.72    0.85   0.99    0.98\nMin T   0.37   1.00   0.22    0.49   0.37    0.33\nMax T   0.72   0.22   1.00    0.70   0.75    0.66\nMean T  0.85   0.49   0.70    1.00   0.85    0.81\nFuels   0.99   0.37   0.75    0.85   1.00    1.00\nRoll F  0.98   0.33   0.66    0.81   1.00    1.00 \n```"]
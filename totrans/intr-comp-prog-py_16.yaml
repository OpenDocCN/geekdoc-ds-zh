- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DYNAMIC PROGRAMMING
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic programming** was invented by Richard Bellman in the 1950s. Don''t
    try to infer anything about the technique from its name. As Bellman described
    it, the name “dynamic programming” was chosen to hide from governmental sponsors
    “the fact that I was really doing mathematics… [the phrase dynamic programming]
    was something not even a Congressman could object to.” [^(94)](#c15-fn-0001)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic programming is a method for efficiently solving problems that exhibit
    the characteristics of overlapping subproblems and optimal substructure. Fortunately,
    many optimization problems exhibit these characteristics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: A problem has **optimal substructure** if a globally optimal solution can be
    found by combining optimal solutions to local subproblems. We've already looked
    at a number of such problems. Merge sort, for example, exploits the fact that
    a list can be sorted by first sorting sublists and then merging the solutions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: A problem has **overlapping subproblems** if an optimal solution involves solving
    the same problem multiple times. Merge sort does not exhibit this property. Even
    though we are performing a merge many times, we are merging different lists each
    time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: It's not immediately obvious, but the 0/1 knapsack problem exhibits both of
    these properties. First, however, we digress to look at a problem where the optimal
    substructure and overlapping subproblems are more obvious.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 Fibonacci Sequences, Revisited
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Chapter 4, we looked at a straightforward recursive implementation of the
    Fibonacci function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While this implementation of the recurrence is obviously correct, it is terribly
    inefficient. Try, for example, running `fib(120)`, but don't wait for it to complete.
    The complexity of the implementation is a bit hard to derive, but it is roughly
    `O(fib(n))`. That is, its growth is proportional to the growth in the value of
    the result, and the growth rate of the Fibonacci sequence is substantial. For
    example, `fib(120)` is `8,670,007,398,507,948,658,051,921`. If each recursive
    call took a nanosecond, `fib(120)` would take about `250,000` years to finish.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Let's try and figure out why this implementation takes so long. Given the tiny
    amount of code in the body of `fib`, it's clear that the problem must be the number
    of times that `fib` calls itself. As an example, look at the tree of calls associated
    with the invocation `fib(6)`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![c15-fig-0001.jpg](../images/c15-fig-0001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Figure 15-1 Tree of calls for recursive Fibonacci
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are computing the same values over and over again. For example,
    `fib` gets called with `3` three times, and each of these calls provokes four
    additional calls of `fib`. It doesn't require a genius to think that it might
    be a good idea to record the value returned by the first call, and then look it
    up rather than compute it each time it is needed. This is the key idea behind
    dynamic programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: There are two approaches to dynamic programming
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**Memoization** solves the original problem top-down. It starts from the original
    problem, breaks it into subproblems, breaks the subproblems into subproblems,
    etc. Each time it solves a subproblem, it stores the answer in a table. Each time
    it needs to solve a subproblem, it first tries to look up the answer in the table.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记忆化**从自顶向下解决原始问题。它从原始问题开始，将其分解为子问题，再将子问题分解为子问题，依此类推。每次解决一个子问题时，它都会将答案存储在表中。每次需要解决一个子问题时，它会首先尝试在表中查找答案。'
- en: '**Tabular** is a bottom-up method. It starts from the smallest problems, and
    stores the answers to those in a table. It then combines the solutions to these
    problems to solve the next smallest problems, and stores those answers in the
    table.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格法**是一种自底向上的方法。它从最小的问题开始，并将这些问题的答案存储在表中。然后，它将这些问题的解决方案结合起来，以解决下一个最小的问题，并将这些答案存储在表中。'
- en: '[Figure 15-2](#c15-fig-0002) contains implementations of Fibonacci using each
    approach to dynamic programming. The function `fib_memo` has a parameter, `memo`,
    that it uses to keep track of the numbers it has already evaluated. The parameter
    has a default value, the empty dictionary, so that clients of `fib_memo` don''t
    have to worry about supplying an initial value for `memo`. When `fib_memo` is
    called with an `n > 1`, it attempts to look up `n` in `memo`. If it is not there
    (because this is the first time `fib_memo` has been called with that value), an
    exception is raised. When this happens, `fib_memo` uses the normal Fibonacci recurrence,
    and then stores the result in `memo`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-2](#c15-fig-0002) 包含使用每种动态规划方法实现的斐波那契数列。函数 `fib_memo` 有一个参数 `memo`，用于跟踪它已经评估的数字。该参数有一个默认值，即空字典，因此
    `fib_memo` 的客户不必担心提供 `memo` 的初始值。当 `fib_memo` 被调用时，若 `n > 1`，它会尝试在 `memo` 中查找
    `n`。如果不存在（因为这是第一次以该值调用 `fib_memo`），则会引发异常。当这种情况发生时，`fib_memo` 使用正常的斐波那契递归，然后将结果存储在
    `memo` 中。'
- en: The function `fib_tab` is quite simple. It exploits the fact that all of the
    subproblems for Fibonacci are known in advance and easy to enumerate in a useful
    order.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `fib_tab` 非常简单。它利用了所有斐波那契的子问题都是提前已知且容易以有用的顺序列举的事实。
- en: '![c15-fig-0002.jpg](../images/c15-fig-0002.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0002.jpg](../images/c15-fig-0002.jpg)'
- en: '[Figure 15-2](#c15-fig-0002a) Implementing Fibonacci using a memo'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-2](#c15-fig-0002a) 使用备忘录实现斐波那契数列'
- en: 'If you try running `fib_memo` and `fib_tab`, you will see that they are indeed
    quite fast: `fib(120)` returns almost instantly. What is the complexity of these
    functions? `fib_memo` calls `fib` exactly once for each value from 0 to `n`. Therefore,
    under the assumption that dictionary lookup can be done in constant time, the
    time complexity of `fib_memo(n)` is in `O(n)`. `fib_tab` is even more obviously
    in `O(n)`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试运行 `fib_memo` 和 `fib_tab`，你会看到它们确实非常快：`fib(120)` 几乎瞬间返回。这个函数的复杂度是什么？`fib_memo`
    针对从 0 到 `n` 的每个值调用 `fib` 恰好一次。因此，在假设字典查找可以在常数时间内完成的前提下，`fib_memo(n)` 的时间复杂度为 `O(n)`。而
    `fib_tab` 的复杂度更明显也是 `O(n)`。
- en: If solving the original problem requires solving all subproblems, it is usually
    better to use the tabular approach. It is simpler to program, and faster because
    it doesn't have the overhead associated with recursive calls and can pre-allocate
    a table of the appropriate size rather than growing a memo. If only some of the
    subproblems need to be solved (which is often the case), memoization is typically
    more efficient.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果解决原始问题需要解决所有子问题，通常使用表格方法更好。它更简单，速度更快，因为它没有递归调用的开销，并且可以预先分配适当大小的表，而不是动态增长备忘录。如果仅需要解决某些子问题（这通常是情况），记忆化通常更高效。
- en: '**Finger exercise**: Use the tabular method to implement a dynamic programming
    solution that meets the specification'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**手指练习**：使用表格方法实现一个符合规范的动态规划解决方案'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 15.2 Dynamic Programming and the 0/1 Knapsack Problem
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.2 动态规划与 0/1 背包问题
- en: One of the optimization problems we looked at in Chapter 14 was the 0/1 knapsack
    problem. Recall that we looked at a greedy algorithm that ran in `n log n` time,
    but was not guaranteed to find an optimal solution. We also looked at a brute-force
    algorithm that was guaranteed to find an optimal solution, but ran in exponential
    time. Finally, we discussed the fact that the problem is inherently exponential
    in the size of the input. In the worst case, one cannot find an optimal solution
    without looking at all possible answers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 14 章中研究的优化问题之一是 0/1 背包问题。回想一下，我们研究了一种在 `n log n` 时间内运行的贪心算法，但不能保证找到最优解。我们还研究了一种保证找到最优解的暴力算法，但其运行时间为指数级。最后，我们讨论了这个问题在输入规模上本质上是指数级的。在最坏的情况下，如果不查看所有可能的答案，就无法找到最优解。
- en: Fortunately, the situation is not as bad as it seems. Dynamic programming provides
    a practical method for solving most 0/1 knapsack problems in a reasonable amount
    of time. As a first step in deriving such a solution, we begin with an exponential
    solution based on exhaustive enumeration. The key idea is to think about exploring
    the space of possible solutions by constructing a rooted binary tree that enumerates
    all states satisfying the weight constraint.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，情况并不像看起来那么糟。动态规划提供了一种在合理时间内解决大多数 0/1 背包问题的实用方法。作为推导此类解决方案的第一步，我们从基于穷举枚举的指数解决方案开始。关键思想是通过构建一个根节点二叉树来探索满足重量约束的所有可能解的空间。
- en: A **rooted binary tree** is an acyclic directed graph in which
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**根节点二叉树**是一个无环有向图，其中。'
- en: There is exactly one node with no parents. This is called the **root**.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恰好有一个没有父节点的节点。这被称为**根**。
- en: Each non-root node has exactly one parent.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个非根节点恰好有一个父节点。
- en: Each node has at most two children. A childless node is called a **leaf**.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点最多有两个子节点。没有子节点的节点称为**叶子**。
- en: 'Each node in the search tree for the 0/1 knapsack problem is labeled with a
    quadruple that denotes a partial solution to the knapsack problem. The elements
    of the quadruple are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 0/1 背包问题的搜索树中的每个节点都带有一个四元组，表示背包问题的部分解。四元组的元素包括：
- en: A set of items to be taken
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组要取的物品。
- en: The list of items for which a decision has not been made
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尚未做出决策的物品列表。
- en: The total value of the items in the set of items to be taken (this is merely
    an optimization, since the value could be computed from the set)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要取的物品集合的总价值（这仅仅是一个优化，因为价值可以从集合中计算得出）。
- en: The remaining space in the knapsack. (Again, this is an optimization, since
    it is merely the difference between the weight allowed and the weight of all the
    items taken so far.)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背包中剩余的空间。（同样，这是一个优化，因为它仅仅是允许的重量与迄今为止所有物品重量的差值。）
- en: The tree is built top-down starting with the root.[^(95)](#c15-fn-0002) One
    element is selected from the still-to-be-considered items. If there is room for
    that item in the knapsack, a node is constructed that reflects the consequence
    of choosing to take that item. By convention, we draw that node as the left child.
    The right child shows the consequences of choosing not to take that item. The
    process is then applied recursively until either the knapsack is full or there
    are no more items to consider. Because each edge represents a decision (to take
    or not to take an item), such trees are called **decision trees**.[^(96)](#c15-fn-0003)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 树是自上而下构建的，从根节点开始。[^(95)](#c15-fn-0002) 从待考虑的物品中选择一个元素。如果该物品可以放入背包中，就构建一个节点，反映选择这个物品的后果。根据约定，我们将该节点绘制为左子节点。右子节点显示选择不带这个物品的后果。然后递归应用此过程，直到背包满或没有更多物品可考虑。因为每条边代表一个决策（选择带入或不带入一个物品），这样的树被称为**决策树**。[^(96)](#c15-fn-0003)
- en: '[Figure 15-3](#c15-fig-0003) is a table describing a set of items.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-3](#c15-fig-0003) 是描述一组物品的表。'
- en: '![c15-fig-0003.jpg](../images/c15-fig-0003.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0003.jpg](../images/c15-fig-0003.jpg)'
- en: '[Figure 15-3](#c15-fig-0003a) Table of items with values and weights'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-3](#c15-fig-0003) 物品的价值和重量表。'
- en: '[Figure 15-4](#c15-fig-0004) is a decision tree for deciding which of those
    items to take under the assumption that the knapsack has a maximum weight of `5`.
    The root of the tree (node 0) has a label `<{}, [a,b,c,d], 0, 5>`, indicating
    that no items have been taken, all items remain to be considered, the value of
    the items taken is `0`, and a weight of `5` is still available. Node `1` indicates
    that item `a` has been taken, `[b,c,d]` remain to be considered, the value of
    the items taken is `6`, and the knapsack can hold another `2` pounds. Node `1`
    has no left child since item `b`, which weighs `3` pounds, would not fit in the
    knapsack.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-4](#c15-fig-0004)是一个决策树，用于决定在假设背包最大重量为`5`的情况下应选择哪些物品。树的根节点（节点 0）标记为`<{},
    [a,b,c,d], 0, 5>`，表示没有物品被选中，所有物品仍需考虑，已选物品的价值为`0`，并且仍有`5`的重量可用。节点`1`表示物品`a`已被选中，剩余需考虑的物品为`[b,c,d]`，已选物品的价值为`6`，而背包还可以容纳`2`磅。节点`1`没有左子节点，因为重量为`3`磅的物品`b`无法放入背包。'
- en: In [Figure 15-4](#c15-fig-0004), the numbers that precede the colon in each
    node indicate one order in which the nodes could be generated. This particular
    ordering is called left-first depth-first. At each node, we attempt to generate
    a left node. If that is impossible, we attempt to generate a right node. If that
    too is impossible, we back up one node (to the parent) and repeat the process.
    Eventually, we find ourselves having generated all descendants of the root, and
    the process halts. When it does, each combination of items that could fit in the
    knapsack has been generated, and any leaf node with the greatest value represents
    an optimal solution. Notice that for each leaf node, either the second element
    is the empty list (indicating that there are no more items to consider taking)
    or the fourth element is 0 (indicating that there is no room left in the knapsack).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 15-4](#c15-fig-0004)中，每个节点前的冒号之前的数字表示节点生成的一种顺序。这种特定的顺序称为左优先深度优先。在每个节点，我们尝试生成左节点。如果不可能，则尝试生成右节点。如果也不可能，则向上回退一个节点（到父节点）并重复该过程。最终，我们生成了根节点的所有子孙，过程停止。当过程结束时，所有可以放入背包的物品组合都已生成，任何具有最大价值的叶节点都代表了一个最佳解。注意，对于每个叶节点，第二个元素要么是空列表（表示没有更多物品需要考虑），要么第四个元素为0（表示背包没有剩余空间）。
- en: '![c15-fig-0004.jpg](../images/c15-fig-0004.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0004.jpg](../images/c15-fig-0004.jpg)'
- en: '[Figure 15-4](#c15-fig-0004a) Decision tree for knapsack problem'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-4](#c15-fig-0004a) 背包问题的决策树'
- en: Unsurprisingly (especially if you read Chapter 14), the natural implementation
    of a depth-first tree search is recursive. [Figure 15‑5](#c15-fig-0005) contains
    such an implementation. It uses class `Item` and the functions defined in Figure
    14-2.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪（特别是如果你阅读了第14章），深度优先树搜索的自然实现是递归的。[图 15-5](#c15-fig-0005)包含这样的实现。它使用`Item`类及在图14-2中定义的函数。
- en: 'The function `max_val` returns two values, the set of items chosen and the
    total value of those items. It is called with two arguments, corresponding to
    the second and fourth elements of the labels of the nodes in the tree:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`max_val`返回两个值，所选物品的集合及这些物品的总价值。它被调用时有两个参数，分别对应树中节点标签的第二个和第四个元素：
- en: '`to_consider`. Those items that nodes higher up in the tree (corresponding
    to earlier calls in the recursive call stack) have not yet considered.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_consider`。那些在树中较高节点（对应于递归调用栈中的早期调用）尚未考虑的物品。'
- en: '`avail`. The amount of space still available.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`avail`。仍然可用的空间量。'
- en: Notice that the implementation of `max_val` does not build the decision tree
    and then look for an optimal node. Instead, it uses the local variable `result`
    to record the best solution found so far. The code in [Figure 15-6](#c15-fig-0006)
    can be used to test `max_val`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`max_val`的实现并不是构建决策树再寻找最佳节点。相反，它使用局部变量`result`记录到目前为止找到的最佳解。可以使用[图 15-6](#c15-fig-0006)中的代码来测试`max_val`。
- en: 'When `small_test` (which uses the values in [Figure 15-3](#c15-fig-0003)) is
    run it prints a result indicating that node `8` in [Figure 15-4](#c15-fig-0004)
    is an optimal solution:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`small_test`（使用[图 15-3](#c15-fig-0003)中的值）时，它打印出一个结果，表明[图 15-4](#c15-fig-0004)中的节点`8`是一个最佳解：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![c15-fig-0005.jpg](../images/c15-fig-0005.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0005.jpg](../images/c15-fig-0005.jpg)'
- en: '[Figure 15-5](#c15-fig-0005a) Using a decision tree to solve a knapsack problem'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-5](#c15-fig-0005a) 使用决策树解决背包问题'
- en: The functions `build_many_items` and `big_test` can be used to test `max_val`
    on randomly generated sets of items. Try `big_test(10, 40)`. That didn't take
    long. Now try `big_test(40, 100)`. After you get tired of waiting for it to return,
    stop the computation and ask yourself what is going on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`build_many_items`和`big_test`可用于在随机生成的项目集上测试`max_val`。尝试`big_test(10, 40)`。这并没有花费太长时间。现在尝试`big_test(40,
    100)`。当你等得不耐烦时，停止计算，问问自己发生了什么。
- en: Let's think about the size of the tree we are exploring. Since at each level
    of the tree we are deciding to keep or not keep one item, the maximum depth of
    the tree is `len(items)`. At level `0` we have only one node, at level `1` up
    to two nodes, at level `2` up to four nodes, and at level `3` up to eight nodes.
    At level `39` we have up to 2^(39) nodes. No wonder it takes a long time to run!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下我们正在探索的树的大小。由于在树的每一层我们都在决定保留或不保留一个项目，因此树的最大深度为`len(items)`。在层级`0`时，我们只有一个节点；在层级`1`时最多有两个节点；在层级`2`时最多有四个节点；在层级`3`时最多有八个节点。在层级`39`时，最多有2^(39)个节点。难怪运行起来需要很长时间！
- en: Let's see if dynamic programming can help.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看动态规划是否能提供帮助。
- en: Optimal substructure is visible both in [Figure 15-4](#c15-fig-0004) and in
    [Figure 15-5](#c15-fig-0005). Each parent node combines the solutions reached
    by its children to derive an optimal solution for the subtree rooted at that parent.
    This is reflected in [Figure 15-5](#c15-fig-0005) by the code following the comment
    `#Choose better branch`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 15-4](#c15-fig-0004)和[图 15-5](#c15-fig-0005)中都可以看到最优子结构。每个父节点结合其子节点达到的解决方案，以推导出该父节点根树的最优解决方案。这在[图
    15-5](#c15-fig-0005)中通过注释`#Choose better branch`后的代码得以体现。
- en: '![c15-fig-0006.jpg](../images/c15-fig-0006.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0006.jpg](../images/c15-fig-0006.jpg)'
- en: '[Figure 15-6](#c15-fig-0006a) Testing the decision tree-based implementation'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-6](#c15-fig-0006a) 测试基于决策树的实现'
- en: Are there also overlapping subproblems? At first glance, the answer seems to
    be “no.” At each level of the tree we have a different set of available items
    to consider. This implies that if common subproblems do exist, they must be at
    the same level of the tree. And indeed, at each level of the tree, each node has
    the same set of items to consider taking. However, we can see by looking at the
    labels in [Figure 15-4](#c15-fig-0004) that each node at a level represents a
    different set of choices about the items considered higher in the tree.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 是否也存在重叠子问题？乍一看，答案似乎是“没有”。在树的每一层，我们都有不同的可用项目集可供考虑。这意味着，如果确实存在公共子问题，它们必须在树的同一层级。实际上，在树的每一层中，每个节点都有相同的项目集可供考虑。然而，通过查看[图
    15-4](#c15-fig-0004)中的标签，我们可以看到，每个层级的节点表示关于更高层树中所考虑项目的不同选择集。
- en: 'Think about what problem is being solved at each node: finding the optimal
    items to take from those left to consider, given the remaining available weight.
    The available weight depends upon the total weight of the items taken so far,
    but not on which items are taken or the total value of the items taken. So, for
    example, in [Figure 15-4](#c15-fig-0004), nodes 2 and 7 are actually solving the
    same problem: deciding which elements of [c,d] should be taken, given that the
    available weight is `2`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 思考每个节点正在解决的问题：在给定剩余可用重量的情况下，从剩下的可考虑项目中找到最佳项目。可用重量依赖于到目前为止所取项目的总重量，但与所取项目或所取项目的总价值无关。因此，例如，在[图
    15-4](#c15-fig-0004)中，节点2和7实际上在解决同一个问题：在可用重量为`2`的情况下，决定应该取[c,d]中的哪些元素。
- en: The code in [Figure 15-7](#c15-fig-0007) exploits the optimal substructure and
    overlapping subproblems to provide a memorization-based dynamic programming solution
    to the 0/1 knapsack problem.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-7](#c15-fig-0007)中的代码利用了最优子结构和重叠子问题，提供了一种基于记忆化的动态规划解决方案，来解决0/1背包问题。'
- en: '![c15-fig-0007.jpg](../images/c15-fig-0007.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0007.jpg](../images/c15-fig-0007.jpg)'
- en: '[Figure 15-7](#c15-fig-0007a) Dynamic programming solution to knapsack problem'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-7](#c15-fig-0007a) 背包问题的动态规划解决方案'
- en: An extra parameter, `memo`, has been added to keep track of solutions to subproblems
    that have already been solved. It is implemented using a dictionary with a key
    constructed from the length of `to_consider` and the available weight. The expression
    `len(to_consider)` is a compact way of representing the items still to be considered.
    This works because items are always removed from the same end (the front) of the
    list `to_consider`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个额外的参数`memo`来跟踪已经解决的子问题的解。它是使用一个字典实现的，键由`to_consider`的长度和可用重量构成。表达式`len(to_consider)`是一种简洁的方式来表示仍需考虑的物品。这个方法有效，因为物品总是从列表`to_consider`的同一端（前端）移除。
- en: "Now, replace the call to `max_val` by a call to `fast_max_val` in `big_test`,\
    \ and try running \uFEFF`big_test(40, 100)`. It returns almost instantly with\
    \ an optimal solution to the problem."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将对`max_val`的调用替换为对`fast_max_val`的调用，并尝试运行`big_test(40, 100)`。它几乎瞬间返回问题的最优解。
- en: '[Figure 15-8](#c15-fig-0008) shows the number of calls made when we ran the
    code on problems with a varying number of items and a maximum weight of 100\.
    The growth is hard to quantify, but it is clearly far less than exponential.[^(97)](#c15-fn-0004)
    But how can this be, since we know that the 0/1 knapsack problem is inherently
    exponential in the number of items? Have we found a way to overturn fundamental
    laws of the universe? No, but we have discovered that computational complexity
    can be a subtle notion.[^(98)](#c15-fn-0005)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-8](#c15-fig-0008)显示了当我们在具有不同物品数量和最大重量为100的情况下运行代码时的调用次数。增长量很难量化，但显然远低于指数级。[^(97)](#c15-fn-0004)但这怎么可能呢？因为我们知道0/1背包问题在物品数量上本质上是指数级的？我们是否找到了一种推翻宇宙基本法则的方法？不，但我们发现计算复杂性可能是一个微妙的概念。[^(98)](#c15-fn-0005)'
- en: '![c15-fig-0008.jpg](../images/c15-fig-0008.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![c15-fig-0008.jpg](../images/c15-fig-0008.jpg)'
- en: '[Figure 15-8](#c15-fig-0008a) Performance of dynamic programming solution'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-8](#c15-fig-0008a) 动态编程解决方案的性能'
- en: The running time of `fast_max_val` is governed by the number of distinct pairs,
    `<to_consider, avail>`, generated. This is because the decision about what to
    do next depends only upon the items still available and the total weight of the
    items already taken.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`fast_max_val`的运行时间由生成的不同对`<to_consider, avail>`的数量决定。这是因为关于下一步该做什么的决定仅依赖于仍然可用的物品和已选物品的总重量。'
- en: The number of possible values of `to_consider` is bounded by `len(items)`. The
    number of possible values of `avail` is more difficult to characterize. It is
    bounded from above by the maximum number of distinct totals of weights of the
    items that the knapsack can hold. If the knapsack can hold at most `n` items (based
    on the capacity of the knapsack and the weights of the available items), `avail`
    can take on at most `2`^n different values. In principle, this could be a rather
    large number. However, in practice, it is not usually so large. Even if the knapsack
    has a large capacity, if the weights of the items are chosen from a reasonably
    small set of possible weights, many sets of items will have the same total weight,
    greatly reducing the running time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`to_consider`的可能值数量受`len(items)`的限制。`avail`的可能值更难以界定。它的上限是背包可以容纳的项目重量总和的最大不同值。如果背包最多可以容纳`n`个物品（根据背包的容量和可用物品的重量），则`avail`最多可以取`2`^n个不同值。从原则上讲，这可能是一个相当大的数字。然而，实际上通常并不是如此。即使背包的容量很大，如果物品的重量是从合理小的重量集合中选择的，许多物品的组合将具有相同的总重量，从而大大减少运行时间。'
- en: This algorithm falls into a complexity class called **pseudo-polynomial**. A
    careful explanation of this concept is beyond the scope of this book. Roughly
    speaking, `fast_max_val` is exponential in the number of bits needed to represent
    the possible values of `avail`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法属于一个被称为**伪多项式**的复杂度类。对此概念的仔细解释超出了本书的范围。粗略来说，`fast_max_val`在表示`avail`可能值所需的位数上是指数级的。
- en: To see what happens when the values of `avail` are chosen from a considerably
    larger space, change the call to `max_val` in the function `big_test` in [Figure
    15-6](#c15-fig-0006) to
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当`avail`的值从一个相当大空间中选择时会发生什么，请在[图 15-6](#c15-fig-0006)中的`big_test`函数里将对`max_val`的调用更改为
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finding a solution now takes `1,028,403` calls of `fast_max_val` when the number
    of items is `1024`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当物品数量为`1024`时，找到解决方案需要`1,028,403`次对`fast_max_val`的调用。
- en: To see what happens when the weights are chosen from an enormous space, we can
    choose the possible weights from the positive reals rather than the positive integers.
    To do this, replace the line,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了观察在选取来自一个巨大空间的权重时会发生什么，我们可以从正实数中选择可能的权重，而不是从正整数中选择。为此，替换该行，
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: in `build_many_items` by the line
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`build_many_items`中，由于这一行
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each time it is called, `random.random()` returns a random floating-point number
    between `0.0` and `1.0`, so there are, for all intents and purposes, an infinite
    number of possible weights. Don't hold your breath waiting for this last test
    to finish. Dynamic programming may be a miraculous technique in the common sense
    of the word,[^(99)](#c15-fn-0006) but it is not capable of performing miracles
    in the liturgical sense.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用时，`random.random()`返回一个介于`0.0`和`1.0`之间的随机浮点数，因此，在所有实用意义上，可能的权重数量是无限的。不要指望等待这个最后的测试完成。动态规划在一般意义上可能是一种奇迹技术，[^(99)](#c15-fn-0006)，但在礼仪意义上并不能创造奇迹。
- en: 15.3 Dynamic Programming and Divide-and-Conquer
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.3 动态规划与分治法
- en: Like divide-and-conquer algorithms, dynamic programming is based upon solving
    independent subproblems and then combining those solutions. There are, however,
    some important differences.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与分治算法类似，动态规划基于解决独立的子问题，然后将这些解决方案组合起来。然而，仍然存在一些重要的区别。
- en: Divide-and-conquer algorithms are based upon finding subproblems that are substantially
    smaller than the original problem. For example, merge sort works by dividing the
    problem size in half at each step. In contrast, dynamic programming involves solving
    problems that are only slightly smaller than the original problem. For example,
    computing the nineteenth Fibonacci number is not a substantially smaller problem
    than computing the twentieth Fibonacci number.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 分治算法基于寻找比原始问题小得多的子问题。例如，归并排序通过在每一步将问题规模减半来工作。相对而言，动态规划涉及解决仅比原始问题稍小的问题。例如，计算第十九个斐波那契数并不是一个比计算第二十个斐波那契数小得多的问题。
- en: Another important distinction is that the efficiency of divide-and-conquer algorithms
    does not depend upon structuring the algorithm so that identical problems are
    solved repeatedly. In contrast, dynamic programming is efficient only when the
    number of distinct subproblems is significantly smaller than the total number
    of subproblems.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的区别是，分治算法的效率并不依赖于将算法结构化以便重复解决相同的问题。相比之下，动态规划仅在不同子问题的数量显著少于总子问题数量时才高效。
- en: 15.4 Terms Introduced in Chapter
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.4 章节中介绍的术语
- en: dynamic programming
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态规划
- en: optimal substructure
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最优子结构
- en: overlapping subproblems
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重叠子问题
- en: memoization
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备忘录法
- en: tabular method
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格法
- en: rooted binary tree
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有根二叉树
- en: root
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根
- en: leaf
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 叶子
- en: decision tree
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树
- en: pseudo-polynomial complexity
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伪多项式复杂度

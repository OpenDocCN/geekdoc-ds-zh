- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: MODULES AND FILES
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 模块和文件
- en: So far, we have operated under the assumptions that 1) our entire program is
    stored in one file, 2) our programs do not depend upon previously written code
    (other than the code implementing Python), and 3) our programs do not access previously
    gathered data nor do they store their results in a way that allows them to be
    accessed after the program is finished running.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们假设1）我们的整个程序存储在一个文件中，2）我们的程序不依赖于之前编写的代码（除了实现Python的代码），以及3）我们的程序不访问之前收集的数据，也不以允许在程序运行结束后访问的方式存储结果。
- en: The first assumption is perfectly reasonable as long as programs are small.
    As programs get larger, however, it is typically more convenient to store different
    parts of them in different files. Imagine, for example, that multiple people are
    working on the same program. It would be a nightmare if they were all trying to
    update the same file. In Section 7.1, we discuss a mechanism, Python modules,
    that allow us to easily construct a program from code in multiple files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个假设在程序较小时是完全合理的。然而，随着程序的增大，将不同部分存储在不同文件中通常更方便。比如说，想象一下多个开发者在同一个程序上工作。如果他们都试图更新同一个文件，那将是一场噩梦。在第7.1节中，我们讨论了一种机制，即Python模块，它允许我们轻松地从多个文件中的代码构建程序。
- en: The second and third assumptions are reasonable for exercises designed to help
    people learn to program, but rarely reasonable when writing programs designed
    to accomplish something useful. In Section 7.2, we show how to take advantage
    of library modules that are part of the standard Python distribution. We use a
    couple of these modules in this chapter, and many others later in the book. Section
    7.3 provides a brief introduction to reading from and writing data to files.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第二和第三个假设对于旨在帮助人们学习编程的练习是合理的，但在编写旨在完成某些有用功能的程序时，这种假设很少是合理的。在第7.2节中，我们展示了如何利用标准Python发行版中的库模块。在本章中，我们使用了其中几个模块，而在书的后面部分还会使用许多其他模块。第7.3节简要介绍了如何从文件中读取和写入数据。
- en: 7.1  Modules
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1  模块
- en: A **module** is a `.py` file containing Python definitions and statements. We
    could create, for example, a file `circle.py` containing the code in [Figure 7-1](#c7-fig-0001).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块**是一个包含Python定义和语句的`.py`文件。例如，我们可以创建一个包含[图7-1](#c7-fig-0001)中的代码的文件`circle.py`。'
- en: '![c7-fig-0001.jpg](../images/c7-fig-0001.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![c7-fig-0001.jpg](../images/c7-fig-0001.jpg)'
- en: '[Figure 7-1](#c7-fig-0001a) Some code related to circles and spheres'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-1](#c7-fig-0001a) 与圆和球体相关的一些代码'
- en: A program gets access to a module through an **import statement**. So, for example,
    the code
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过**导入语句**访问模块。例如，代码
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: will print
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将打印
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Modules are typically stored in individual files. Each module has its own private
    symbol table. Consequently, within `circle.py` we access objects (e.g., `pi` and
    `area`) in the usual way. Executing `import M` creates a binding for module `M`
    in the scope in which the `import` appears. Therefore, in the importing context
    we use dot notation to indicate that we are referring to a name defined in the
    imported module.[^(46)](#c7-fn-0001) For example, outside of `circle.py`, the
    references `pi` and `circle.pi` can (and in this case do) refer to different objects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 模块通常存储在单独的文件中。每个模块都有自己的私有符号表。因此，在`circle.py`中，我们以通常的方式访问对象（例如，`pi`和`area`）。执行`import
    M`将在`import`出现的作用域中为模块`M`创建一个绑定。因此，在导入上下文中，我们使用点表示法来表明我们引用的是在导入模块中定义的名称。[^(46)](#c7-fn-0001)
    例如，在`circle.py`之外，引用`pi`和`circle.pi`可以（并且在这种情况下确实）指代不同的对象。
- en: At first glance, the use of dot notation may seem cumbersome. On the other hand,
    when one imports a module one often has no idea what local names might have been
    used in the implementation of that module. The use of dot notation to **fully**
    **qualify** names avoids the possibility of getting burned by an accidental name
    clash. For example, executing the assignment `pi = 3` outside of the `circle`
    module does not change the value of `pi` used within the `circle` module.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 初看，使用点表示法似乎有些繁琐。另一方面，当导入一个模块时，通常不知道该模块的实现中可能使用了哪些局部名称。使用点表示法**完全** **限定** 名称避免了因意外名称冲突而导致的错误。例如，在`circle`模块之外执行赋值`pi
    = 3`不会改变在`circle`模块中使用的`pi`的值。
- en: As we have seen, a module can contain executable statements as well as function
    definitions. Typically, these statements are used to initialize the module. For
    this reason, the statements in a module are executed only the first time a module
    is imported into a program. Moreover, a module is imported only once per interpreter
    session. If you start a console, import a module, and then change the contents
    of that module, the interpreter will still be using the original version of the
    module. This can lead to puzzling behavior when debugging. When in doubt, start
    a new shell.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，一个模块可以包含可执行语句以及函数定义。通常，这些语句用于初始化模块。因此，模块中的语句仅在模块首次被导入到程序时执行。此外，每个解释器会话中，一个模块只会被导入一次。如果你启动一个控制台，导入一个模块，然后更改该模块的内容，解释器仍将使用原始版本的模块。这在调试时可能导致令人困惑的行为。当有疑问时，请启动一个新的shell。
- en: A variant of the `import` statement that allows the importing program to omit
    the module name when accessing names defined inside the imported module. Executing
    the statement `from M import *` creates bindings in the current scope to all objects
    defined within `M`, but not to `M` itself. For example, the code
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一种允许导入程序在访问导入模块内定义的名称时省略模块名称的`import`语句变体。执行语句`from M import *`会在当前作用域中创建对`M`中定义的所有对象的绑定，但不包括`M`本身。例如，代码
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: will first print `3.14159`, and then produce the error message
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先会打印`3.14159`，然后生成错误信息
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Many Python programmers frown upon using this kind of “wild card” `import.`
    They believe that it makes code more difficult to read because it is no longer
    obvious where a name (for example `pi` in the above code) is defined.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Python程序员对使用这种“通配符”`import`表示不满。他们认为这会使代码更难以阅读，因为不再明显一个名称（例如上述代码中的`pi`）是在哪里定义的。
- en: A commonly used variant of the import statement is
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常用的导入语句变体是
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This instructs the interpreter to import the module named *module_name*, but
    rename it to *new_name*. This is useful if *module_name* is already being used
    for something else in the importing program. The most common reason programmers
    use this form is to provide an abbreviation for a long name.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这指示解释器导入名为*module_name*的模块，但将其重命名为*new_name*。如果*module_name*在导入程序中已被用于其他用途，这将非常有用。程序员使用这种形式的最常见原因是为长名称提供一个缩写。
- en: 7.2 Using Predefined Packages
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.2 使用预定义包
- en: Lots of useful module packages come as part of the **standard Python library**;
    we will use a number of them later in this book. Moreover, most Python distributions
    come with packages beyond those in the standard library. The Anaconda distribution
    for Python 3.8 comes with over 600 packages! We will use a few of these later
    in this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多有用的模块包作为**标准Python库**的一部分而提供；我们将在本书后面使用其中的一些。此外，大多数Python发行版还附带标准库以外的包。Python
    3.8的Anaconda发行版包含超过600个包！我们将在本书后面使用其中的一些。
- en: In this section, we introduce two standard packages, `math` and `calendar`,
    and give a few simple examples of their use. By the way, these packages, like
    all of the standard modules, use Python mechanisms that we have not yet covered
    (e.g., exceptions, which are covered in Chapter 9).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们介绍两个标准包，`math`和`calendar`，并给出一些简单的使用示例。顺便提一下，这些包与所有标准模块一样，使用我们尚未涉及的Python机制（例如，异常，在第9章中讨论）。
- en: In previous chapters, we presented various ways to approximate logarithms. But
    we did not show you the easiest way. The easiest way is to simply import the module
    `math`. For example, to print the log of x base 2, all you need to write is
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们介绍了近似对数的各种方法。但我们没有告诉你最简单的方法。最简单的方法是简单地导入模块`math`。例如，要打印以2为底的x的对数，你只需写
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition to containing approximately 50 useful mathematical functions, the
    `math` module contains several useful floating-point constants, e.g., `math.pi`
    and `math.inf` (positive infinity).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含大约50个有用的数学函数外，`math`模块还包含几个有用的浮点常量，例如`math.pi`和`math.inf`（正无穷大）。
- en: The standard library modules designed to support mathematical programming represent
    a minority of the modules in the standard library.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设计用于支持数学编程的标准库模块仅占标准库模块的一小部分。
- en: Imagine, for example, that you wanted to print a textual representation of the
    days of the week of March 1949, something akin to the picture on the right. You
    could go online and find what the calendar looked like that month and year. Then,
    with sufficient patience and lots of trial and error, you might manage to write
    a print statement that would get the job done. Alternatively, you could simply
    write
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，比如你想打印1949年3月星期几的文本表示，就像右侧的图片。你可以在线查找那个月和那年的日历。然后，凭借足够的耐心和多次尝试，你可能会写出一个可以完成这项工作的打印语句。或者，你也可以简单地写
- en: '![c7-fig-5001.jpg](../images/c7-fig-5001.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![c7-fig-5001.jpg](../images/c7-fig-5001.jpg)'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Or, if you preferred to see the calendar in French, Polish, and Danish, you
    could write
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你更喜欢用法语、波兰语和丹麦语查看日历，你可以写
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which would produce
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将产生
- en: '![c7-fig-5002.jpg](../images/c7-fig-5002.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![c7-fig-5002.jpg](../images/c7-fig-5002.jpg)'
- en: Suppose you wanted to know on what day of the week Christmas will fall in 2033\.
    The line
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想知道2033年圣诞节是星期几。该行
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: will answer the question. The invocation of `cal.weekday` will return an integer
    representing the day of the week,[^(47)](#c7-fn-0002) which is then used to index
    into `cal.day_name`—a list of the days of the week in English.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将回答这个问题。调用`cal.weekday`将返回一个表示星期几的整数，[^(47)](#c7-fn-0002)，然后用它来索引`cal.day_name`——一个包含英语星期几的列表。
- en: "Now, suppose you wanted to know on what day American Thanksgiving fell in 2011\\\
    . The day of the week is easy, because American Thanksgiving is always on the\
    \ fourth Thursday of November.[^(48)](#c7-fn-0003) Finding the actual date is\
    \ slightly more complex. First, we use `cal.monthcalendar` to get a list representing\
    \ the weeks of the month. Each element of the list contains seven integers, representing\
    \ the day of the month. If the day does not occur in that month, the first element\
    \ of the list for the week will be `0`. For example, if a month with 31 days starts\
    \ on a Tuesday, the first element of the list will be the list `\uFEFF[0, 1, 2,\
    \ 3, 4, 5, 6]` and the last element of the list will be `\uFEFF[30, 31, 0, 0,\
    \ 0, 0, 0`]."
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想知道2011年美国感恩节是星期几。星期几很简单，因为美国感恩节总是在11月的第四个星期四。[^(48)](#c7-fn-0003) 找到实际日期稍微复杂一些。首先，我们使用`cal.monthcalendar`获取一个表示月份周数的列表。列表的每个元素包含七个整数，表示月份的日期。如果该日期在该月不存在，则该周的列表第一个元素将为`0`。例如，如果一个有31天的月份从星期二开始，则列表的第一个元素将是`[0,
    1, 2, 3, 4, 5, 6]`，而列表的最后一个元素将是`[30, 31, 0, 0, 0, 0, 0]`。
- en: We use the list returned by `calendar.monthcalendar` to check to see if there
    is a Thursday in the first week. If so, the fourth Thursday is in the fourth week
    of the month (which is at index 3); otherwise it is in the fifth week.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`calendar.monthcalendar`返回的列表来检查第一周是否有一个星期四。如果有，第四个星期四就在这个月的第四周（即索引3）；否则，它在第五周。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Finger exercise:** Write a function that meets the specification'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**指尖练习：** 编写一个满足规范的函数。'
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Finger exercise:** Since 1958, Canadian Thanksgiving has occurred on the
    second Monday in October. Write a function that takes a year (>1957) as a parameter,
    and returns the number of days between Canadian Thanksgiving and Christmas.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**指尖练习：** 自1958年以来，加拿大感恩节在十月的第二个星期一举行。编写一个接受年份（>1957）作为参数的函数，返回加拿大感恩节与圣诞节之间的天数。'
- en: By convention, Python programmers usually
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按惯例，Python程序员通常
- en: 1\. Import one module per line.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 每行导入一个模块。
- en: 2\. Place all imports at the start of a program.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 将所有导入放在程序的开头。
- en: 3\. Import standard modules first, followed by third-party modules (e.g., the
    modules provided through Anaconda), and finally application-specific modules.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 首先导入标准模块，其次是第三方模块（例如，通过Anaconda提供的模块），最后是特定应用程序的模块。
- en: Occasionally, placing all imports at the start of a program leads to a problem.
    An import statement is an executable line of code, and the Python interpreter
    executes it when it is encountered. Some modules contain code that gets executed
    when the module is imported. Typically, this code initializes some objects used
    by the module. Since some of this code might access shared resources (e.g., the
    file system on your computer), where in a program the import is executed might
    matter. The good news is that this is unlikely to be a problem for the modules
    you are likely to use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将所有导入放在程序的开头会导致问题。导入语句是可执行的代码行，Python 解释器在遇到时会执行它。一些模块包含在导入模块时会执行的代码。通常，这些代码初始化模块所使用的一些对象。由于这些代码可能会访问共享资源（例如计算机上的文件系统），因此导入在程序中的执行位置可能很重要。好消息是，这不太可能成为你可能使用的模块的问题。
- en: 7.3 Files
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.3 文件
- en: Every computer system uses **files** to save things from one computation to
    the next. Python provides many facilities for creating and accessing files. Here
    we illustrate some of the basic ones.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个计算机系统使用 **文件** 来保存从一次计算到下一次计算的内容。Python 提供了许多创建和访问文件的功能。这里我们展示一些基本的功能。
- en: Each operating system (e.g., Windows and macOS) comes with its own file system
    for creating and accessing files. Python achieves operating-system independence
    by accessing files through something called a **file handle**. The code
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统（例如 Windows 和 macOS）都有自己用于创建和访问文件的文件系统。Python 通过一种称为 **文件句柄** 的方式实现操作系统的独立性。代码
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: instructs the operating system to create a file with the name `kids` and return
    a file handle for that file. The argument `'w'` to `open` indicates that the file
    is to be opened for **writing**. The following code **opens** a file, uses the
    `**write**` method to write two lines. (In a Python string, the escape character
    “`\`” is used to indicate that the next character should be treated in a special
    way. In this example, the string `'\n'` indicates a **newline character**.) Finally,
    the code **closes** the file. Remember to close a file when the program is finished
    using it. Otherwise there is a risk that some or all of the writes may not be
    saved.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 指示操作系统创建一个名为 `kids` 的文件，并返回该文件的文件句柄。`open` 的参数 `'w'` 表示文件将以 **写入** 模式打开。以下代码
    **打开** 一个文件，使用 `**write**` 方法写入两行。（在 Python 字符串中，转义字符“`\`”用于表示下一个字符应以特殊方式处理。在这个例子中，字符串
    `'\n'` 表示 **换行符**。）最后，代码 **关闭** 该文件。记得在程序使用完文件后关闭它。否则，有可能某些或所有写入的数据不会被保存。
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can ensure that you don't forget to close a file by opening it using a `**with**`
    statement. Code of the form
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `**with**` 语句来确保不会忘记关闭文件。此形式的代码
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: opens a file, binds a local name to it that can be used in the *code_block*,
    and then closes the file when *code_block* is exited.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个文件，将一个本地名称绑定到它，可以在 *code_block* 中使用，并在 *code_block* 退出时关闭该文件。
- en: The following code opens a file for **reading** (using the argument `'r'`),
    and prints its contents. Since Python treats a file as a sequence of lines, we
    can use a `for` statement to iterate over the file's contents.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码以 **读取** 模式打开一个文件（使用参数 `'r'`），并打印其内容。由于 Python 将文件视为一系列行，我们可以使用 `for` 语句遍历文件的内容。
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we type the names David and Andrea, this will print
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入大卫和安德烈亚的名字，这将打印。
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The extra line between David and Andrea is there because print starts a new
    line each time it encounters the `'\n'` at the end of each line in the file. We
    could have avoided printing the extra line by writing `print(line[:-1])`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大卫和安德烈亚之间的额外行是因为打印在文件中每行末尾遇到 `'\n'` 时会开始新的一行。我们可以通过写 `print(line[:-1])` 来避免打印额外的行。
- en: The code
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 代码
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: "will print the single line \uFEFF`MichaelMark`."
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将打印单行 `MichaelMark`。
- en: Notice that we have overwritten the previous contents of the file `kids`. If
    we don't want to do that, we can open the file for **appending** (instead of writing)
    by using the argument `'a'`. For example, if we now run the code
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经覆盖了文件 `kids` 的先前内容。如果我们不想这样做，可以使用参数 `'a'` 打开文件以 **追加** 模式（而不是写入模式）。例如，如果我们现在运行代码
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: "it will print the line \uFEFF`MichaelMarkDavidAndrea`."
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打印行 `MichaelMarkDavidAndrea`。
- en: '**Finger exercise**: Write a program that first stores the first ten numbers
    in the Fibonnaci sequence to a file named `fib_file`. Each number should be on
    a separate line in the file. The program should then read the numbers from the
    file and print them.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**指尖练习**：编写一个程序，首先将斐波那契数列的前十个数字存储到名为`fib_file`的文件中。每个数字应单独占一行。程序然后从文件中读取这些数字并打印出来。'
- en: Some of the common operations on files are summarized in [Figure 7-2](#c7-fig-0004).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件的一些常见操作总结在[图 7-2](#c7-fig-0004)中。
- en: '![c7-fig-0002.jpg](../images/c7-fig-0002.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![c7-fig-0002.jpg](../images/c7-fig-0002.jpg)'
- en: '[Figure 7-2](#c7-fig-0004a) Common functions for accessing files'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-2](#c7-fig-0004a) 访问文件的常见函数'
- en: 7.4 Terms Introduced in Chapter
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.4 本章介绍的术语
- en: module
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: import statement
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入语句
- en: fully qualified names
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全限定名称
- en: standard Python library
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准 Python 库
- en: files
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件
- en: file handle
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件句柄
- en: writing to and reading
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入和读取
- en: from files
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中
- en: newline character
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换行符
- en: opening and closing files
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开和关闭文件
- en: with statement
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: with 语句
- en: appending to files
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追加到文件

["```py\nt1 = ()\nt2 = (1, ‘two', 3)\nprint(t1)\nprint(t2)\n```", "```py\n()\n(1, ‘two', 3)\n```", "```py\nt1 = (1, ‘two', 3)\nt2 = (t1, 3.25)\nprint(t2)\nprint((t1 + t2))\nprint((t1 + t2)[3])\nprint((t1 + t2)[2:5]) \n```", "```py\n((1, ‘two', 3), 3.25)\n```", "```py\n(1, ‘two', 3, (1, ‘two', 3), 3.25)\n```", "```py\n(1, ‘two', 3)\n(3, (1, ‘two', 3), 3.25)\n```", "```py\n﻿def intersect(t1, t2):\n    \"\"\"Assumes t1 and t2 are tuples\n       Returns a tuple containing elements that are in\n          both t1 and t2\"\"\"\n    result = ()\n    for e in t1:\n        if e in t2:\n            result += (e,)\n    return result\nprint(intersect((1, 'a', 2), ('b', 2, 'a')))\n```", "```py\n﻿ ﻿def find_extreme_divisors(n1, n2):\n    \"\"\"Assumes that n1 and n2 are positive ints\n        Returns a tuple containing the smallest common divisor > 1 and \n          the largest common divisor of n1 & n2\\. If no common divisor,\n          other than 1, returns (None, None)\"\"\"\n    min_val, max_val = None, None\n    for i in range(2, min(n1, n2) + 1):\n        if n1%i == 0 and n2%i == 0:\n            if min_val == None:\n                min_val = i\n            max_val = i\n    return min_val, max_val\n```", "```py\n﻿min_divisor, max_divisor = find_extreme_divisors(100, 200)\n```", "```py\n﻿for elem in (1, 'a', 2, (3, 4)):\n```", "```py\n﻿L = ['I did it all', 4, 'love']\nfor e in L:\n    print(e)\n```", "```py\nI did it all\n4\nLove\n```", "```py\n﻿`L1 = [1, 2, 3] L2 = L1[-1::-1] for i in range(len(L1)):     print(L1[i]*L2[i])`\n```", "```py\n﻿﻿3\n4\n3\n```", "```py\nTechs = ['MIT', 'Caltech'] \nIvys = ['Harvard', 'Yale', 'Brown']\n```", "```py\nUnivs = [Techs, Ivys]\nUnivs1 = [['MIT', 'Caltech'], ['Harvard', 'Yale', 'Brown']]\n```", "```py\nprint('Univs =', Univs)\nprint('Univs1 =', Univs1)\nprint(Univs == Univs1)\n```", "```py\nUnivs = [['MIT', 'Caltech'], ['Harvard', 'Yale', 'Brown']]\nUnivs1 = [['MIT', 'Caltech'], ['Harvard', 'Yale', 'Brown']]\nTrue\n```", "```py\n﻿﻿print(Univs == Univs1) #test value equality\nprint(id(Univs) == id(Univs1)) #test object equality\nprint(Univs is Univs1) #test object equality\nprint('Id of Univs =', id(Univs))\nprint('Id of Univs1 =', id(Univs1))\n```", "```py\n﻿True\nFalse\nFalse\nId of Univs = 4946827936\nId of Univs1 = 4946612464\n```", "```py\nprint('Ids of Univs[0] and Univs[1]', id(Univs[0]), id(Univs[1]))\nprint('Ids of Univs1[0] and Univs1[1]', id(Univs1[0]), id(Univs1[1]))\n```", "```py\nIds of Univs[0] and Univs[1] 4447807688 4456134664\nIds of Univs1[0] and Univs1[1] 4447805768 4447806728\n```", "```py\nTechs.append('RPI')\n```", "```py\nprint('Univs =', Univs)\nprint('Univs1 =', Univs1)\n```", "```py\nUnivs = [['MIT', 'Caltech', 'RPI'], ['Harvard', 'Yale', 'Brown']]\nUnivs1 = [['MIT', 'Caltech'], ['Harvard', 'Yale', 'Brown']]\n```", "```py\n﻿﻿L1 = [[]]*2\nL2 = [[], []]\nfor i in range(len(L1)):\n    L1[i].append(i)\n    L2[i].append(i)\nprint('L1 =', L1, 'but', 'L2 =', L2)\n```", "```py\n﻿`L = [1, 2, 3] L.append(L) print(L is L[-1])`\n```", "```py\n﻿def append_val(val, list_1 = []):\n    List_1.append(val)\n    print(list_1)\n\nappend_val(3)\nappend_val(4)\n```", "```py\nL1 = [1,2,3]\nL2 = [4,5,6]\nL3 = L1 + L2\nprint('L3 =', L3)\nL1.extend(L2)\nprint('L1 =', L1)\nL1.append(L2)\nprint('L1 =', L1)\n```", "```py\nL3 = [1, 2, 3, 4, 5, 6]\nL1 = [1, 2, 3, 4, 5, 6]\nL1 = [1, 2, 3, 4, 5, 6, [4, 5, 6]]\n```", "```py\ndef remove_dups(L1, L2):\n    \"\"\"Assumes that L1 and L2 are lists.\n       Removes any element from L1 that also occurs in L2\"\"\"\n    for e1 in L1:\n        if e1 in L2:\n            L1.remove(e1)\nL1 = [1,2,3,4]\nL2 = [1,2,5,6]\nRemove_dups(L1, L2)\nprint('L1 =', L1)\n```", "```py\nL1 = [2, 3, 4]\n```", "```py\nnew_L1 = L1\nfor e1 in new_L1:\n```", "```py\n﻿﻿﻿L = [2]\nL1 = [L]\nL2 = L1[:]\nL2 = copy.deepcopy(L1)\nL.append(3)\nprint(f'L1 = {L1}, L2 = {L2}')\n```", "```py\n﻿﻿﻿L1 = [2]\nL2 = [[L1]]\nL3 = copy.deepcopy(L2)\nL1.append(3)\n```", "```py\n﻿L1 = [2]\nL1.append(L1)\n```", "```py\n﻿﻿L1 = [2]\nL2 = [L1, L1]\nL3 = copy.deepcopy(L2)\nL3[0].append(3)\nprint(L3)\n```", "```py\n [*expr* for *elem* in *iterable* if *test*]\n```", "```py\n﻿def f(expr, old_list, test = lambda x: True):\n    new_list = []\n    for e in iterable:\n        if test(e):\n            new_list.append(expr(e))\n    return new_list\n```", "```py\n﻿L = [(x, y)\n     for x in range(6) if x%2 == 0\n     for y in range(6) if y%3 == 0]\n```", "```py\n﻿[(0, 0), (0, 3), (2, 0), (2, 3), (4, 0), (4, 3)]\n```", "```py\n﻿L = []\nfor x in range(6):\n    if x%2 == 0:\n        for y in range(6):\n            if y%3 == 0:\n                L.append((x, y))\n```", "```py\n﻿﻿print([[(x,y) for x in range(6) if x%2 == 0]\n     for y in range(6) if y%3 == 0])\n```", "```py\n﻿[x for x in range(2, 100) if all(x % y != 0  for y in range(3, x))]\n```", "```py\n﻿﻿def gen_primes():\n    primes = []\n    for x in range(2, 100):\n        is_prime = True\n        for y in range(3, x):\n            if x%y == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(x)\n    return primes\n```", "```py\n﻿L = [1, -2, 3.33]\nApply abs to each element of L.\nL = [1, 2, 3.33]\nApply int to each element of [1, 2, 3.33].\nL = [1, 2, 3]\nApply squaring to each element of [1, 2, 3].\nL = [1, 4, 9]\n```", "```py\n`﻿for i in map(lambda x: x**2, [2, 6, 4]):     print(i)` \n```", "```py\n﻿4\n36\n16\n```", "```py\nL1 = [1, 28, 36]\nL2 = [2, 57, 9]\nfor i in map(min, L1, L2):\n    print(i)\n```", "```py\n1\n28\n9\n```", "```py\n﻿def f(L1, L2):\n    \"\"\"L1, L2 lists of same length of numbers\n    returns the sum of raising each element in L1\n    to the power of the element at the same index in L2\n    For example, f([1,2], [2,3]) returns 9\"\"\"\n```", "```py\n﻿even_elems = []\nfor e in L:\n    if e%2 == 0:\n        even_elems.append(e)\n```", "```py\nprint('My favorite professor–John G.–rocks'.split(' '))\nprint('My favorite professor–John G.–rocks'.split('-'))\nprint('My favorite professor–John G.–rocks'.split('–'))\n```", "```py\n['My', 'favorite', 'professor–John', 'G.–rocks']\n['My favorite professor', '', 'John G.', '', 'rocks']\n['My favorite professor', 'John G.', 'rocks']\n```", "```py\n﻿`baseball_teams = {'Dodgers', 'Giants', 'Padres', 'Rockies'} football_teams = {'Giants', 'Eagles', 'Cardinals', 'Cowboys'}`\n```", "```py\n﻿baseball_teams.add('Yankees')\nfootball_teams.update(['Patriots', 'Jets'])\nprint(baseball_teams)\nprint(football_teams)\n```", "```py\n﻿{'Dodgers', 'Yankees', 'Padres', 'Rockies', 'Giants'}\n﻿{'Jets', 'Eagles', 'Patriots', 'Cowboys', 'Cardinals', 'Giants'}\n```", "```py\n`﻿print(baseball_teams.union({1, 2})) print(baseball_teams.intersection(football_teams)) print(baseball_teams.difference(football_teams)) print({'Padres', 'Yankees'}.issubset(baseball_teams))`\n```", "```py\n﻿{'Padres', 'Rockies', 1, 2, 'Giants', ‘Dodgers', 'Yankees'}\n{'Giants'}\n{'Padres', 'Rockies', ‘Dodgers', 'Yankees'}\nTrue\n```", "```py\n﻿print(baseball_teams | {1, 2})\nprint(baseball_teams & football_teams)\nprint(baseball_teams - football_teams)\nprint({'Padres', 'Yankees'} <= baseball_teams)\n```", "```py\n﻿month_numbers = {'Jan':1, 'Feb':2, 'Mar':3, 'Apr':4, 'May':5,\n                1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May'}\nprint(month_numbers)\nprint('The third month is ' + month_numbers[3])\ndist = month_numbers['Apr'] - month_numbers['Jan']\nprint('Apr and Jan are', dist, 'months apart')\n```", "```py\n﻿{'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May'}\nThe third month is Mar\nApr and Jan are 3 months apart\n```", "```py\n﻿Je bois \"good\" rouge vin, et mange pain. \nI drink of wine red.\n```", "```py\nFtoE['bois'] = 'wood'\nprint(translate('Je bois du vin rouge.', dicts, 'French to English'))\n```", "```py\nI wood of wine red.\n```", "```py\n﻿def key_search(L, k):\n    for elem in L:\n        if elem[0] == k:\n            return elem[1]\n    return None\n```", "```py\n﻿﻿﻿capitals = {'France': 'Paris', 'Italy': 'Rome', 'Japan': 'Kyoto'}\nfor key in capitals:\n    print('The capital of', key, 'is', capitals[key])\n```", "```py\n﻿The capital of France is Paris\nThe capital of Italy is Rome\nThe capital of Japan is Kyoto\n```", "```py\n﻿cities = []\nfor val in capitals.values():\n    cities.append(val)\nprint(cities, 'is a list of capital cities')\n```", "```py\n﻿cap_vals = capitals.values()\nprint(cap_vals)\ncapitals['Japan'] = ‘Tokyo'\nprint(cap_vals)\n```", "```py\n﻿﻿dict_values(['Paris', 'Rome', 'Kyoto'])\ndict_values(['Paris', 'Rome', ‘Toyko'])\n```", "```py\n for key, val in capitals.items():\n    print(val, 'is the capital of', key)\n```", "```py\n﻿Paris is the capital of France\nRome is the capital of Italy\nTokyo is the capital of Japan\n```", "```py\n﻿ ﻿def get_min(d):\n    \"\"\"d a dict mapping letters to ints\n       returns the value in d with the key that occurs first in the\n       alphabet. E.g., if d = {x = 11, b = 12}, get_min returns 12.\"\"\"\n```", "```py\n{*key*: *value* for *id1*, *id2* in *iterable* if *test*}\n```", "```py\n﻿﻿number_to_word = {1: 'one', 2: ‘two', 3: ‘three', 4: 'four', 10: ‘ten'}\n```", "```py\n﻿﻿word_to_number = {w: d for d, w in number_to_word.items()}\n```", "```py\n﻿word_to_number = {w: d for d, w in number_to_word.items() if d < 10}\n```", "```py\n﻿ ﻿gen_code_keys = (lambda book, plain_text:(\n    {c: str(book.find(c)) for c in plain_text}))\n```", "```py\n﻿{'n': '1', 'o': '7', ' ': '4', 'i': '13', ‘s': '26'}\n```", "```py\n﻿{'n': '1', 'o': '13', ' ': '2', 'i': '6', ‘s': '57'}\n```", "```py\n﻿ ﻿encoder = (lambda code_keys, plain_text:\n    ''.join(['*' + code_keys[c] for c in plain_text])[1:])\n```", "```py\n﻿encrypt = (lambda book, plain_text:\n    encoder(gen_code_keys(book, plain_text), plain_text))\n```", "```py\n1*13*2*6*57*2*1*13 \n```", "```py\n﻿ ﻿gen_decode_keys = (lambda book, cipher_text:\n    {s: book[int(s)] for s in cipher_text.split('*')})\n```", "```py\n{'1': 'n', '13': 'o', '2': ' ', '6': 'i', '57': ‘s'}\n```", "```py\n﻿﻿22*13*33*137*59*11*23*11*1*57*6*13*1*2*6*57*2*6*1*22*13*33*137*59*11*23*11*1*57*6*173*7*11\n```"]
["```cpp\nsudo yum update\n```", "```cpp\nsudo yum install freeglut-devel libXi-devel libXmu-devel\n```", "```cpp\nsudo init 3\n```", "```cpp\nyour_user_name ALL=(ALL) ALL\n```", "```cpp\nsudo chmod +w /etc/default/grub\nsudo nano /etc/default/grub\n```", "```cpp\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\nGRUB_CMDLINE_LINUX_DEFAULT=\"\"\n```", "```cpp\n# GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n```", "```cpp\nsudo update-grub\n```", "```cpp\nsudo init 5\n```", "```cpp\nsudo sh <sdk_version>.run\n```", "```cpp\nexport PATH=/usr/local/cuda/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda/lib:$LD_LIBRARY_PATH\n```", "```cpp\nenv\n```", "```cpp\ncd /Developer/’GPU Computing/C/src/project’\nmake–i\n```", "```cpp\nif (cudaMalloc(…) == cudaSuccess)\n{\n if (cudaEventCreate(&event) == cudaSucess)\n {\n …\n }\n}\nelse\n{\n…\n}\n```", "```cpp\n#define CUDA_CALL(x) {const cudaError_t a = (x); if (a != cudaSuccess) { printf(\"\\nCUDA Error: %s (err_num=%d) \\n\", cudaGetErrorString(a), a); cudaDeviceReset(); assert(0);} }\n```", "```cpp\nCUDA_CALL(cudaEventCreate(&kernel_start));\n```", "```cpp\nmy_kernel <<<num_blocks, num_threads>>>(param1, param2,…);\n```", "```cpp\n__host__ void cuda_error_check(const char ∗ prefix, const char ∗ postfix)\n{\n if (cudaPeekAtLastError() != cudaSuccess)\n {\n  printf(\"\\n%s%s%s\", prefix, cudaGetErrorString(cudaGetLastError()), postfix);\n  cudaDeviceReset();\n  wait_exit();\n  exit(1);\n }\n}\n```"]
["```py\ntest = [1,2,3]\ntest[3]\n```", "```py\nIndexError: list index out of range \n```", "```py\ntry\n   *code block*\nexcept (*list of exception names*):\n   *code block*\nelse:\n   *code block*\n```", "```py\nsuccess_failure_ratio = num_successes/num_failures\nprint('The success/failure ratio is', success_failure_ratio)\n```", "```py\ntry:\n    success_failure_ratio = num_successes/num_failures\n    print('The success/failure ratio is', success_failure_ratio)\nexcept ZeroDivisionError:\n    print('No failures, so the success/failure ratio is undefined.')\n```", "```py\ndef sum_digits(s):\n    \"\"\"Assumes s is a string\n       Returns the sum of the decimal digits in s\n          For example, if s is 'a2b3c' it returns 5\"\"\"\n```", "```py\nexcept (ValueError, TypeError):\n```", "```py\nexcept:\n```", "```py\ntry:\n    print(get_ratios([1, 2, 7, 6], [1, 2, 0, 3]))\n    print(get_ratios([], []))\n    print(get_ratios([1, 2], [3]))\nexcept ValueError as msg:\n    print(msg)\n```", "```py\n[1.0, 1.0, nan, 2.0]\n[]\nget_ratios called with bad arguments\n```", "```py\nval = int(input('Enter an integer: '))\nprint('The square of the number you entered is', val**2)\n```", "```py\nwhile True:\n    val = input('Enter an integer: ')\n    try:\n        val = int(val)\n        print('The square of the number you entered is', val**2)\n        break #to exit the while loop\n    except ValueError:\n        print(val, 'is not an integer')\n```", "```py\ndef read_int():\n    while True:\n        val = input('Enter an integer: ')\n        try:\n            return(int(val)) #convert str to int before returning\n        except ValueError:\n            print(val, 'is not an integer')\n```", "```py\n﻿def read_val(val_type, request_msg, error_msg):\n  while True:\n      val = input(request_msg + ' ')\n      try:\n          return(val_type(val)) #convert str to val_type\n      except ValueError:\n          print(val, error_msg)\n```", "```py\n`﻿val = read_val(int, 'Enter an integer:', 'is not an integer')`\n```", "```py\n`raise` *exceptionName*`(`*arguments*`)`\n```", "```py\ndef find_an_even(L):\n    \"\"\"Assumes L is a list of integers\n       Returns the first even number in L\n       Raises ValueError if L does not contain an even number\"\"\"\n```", "```py\n`assert` *Boolean expression*\n```", "```py`or    ```", "```py    When an `assert` statement is encountered, the Boolean expression is evaluated. If it evaluates to `True`, execution proceeds on its merry way. If it evaluates to `False`, an `AssertionError` exception is raised.    Assertions are a useful defensive programming tool. They can be used to confirm that the arguments to a function are of appropriate types. They are also a useful debugging tool. They can be used, for example, to confirm that intermediate values have the expected values or that a function returns an acceptable value.```"]
- en: Foreword
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 前言
- en: Jeffrey S. Vetter
  id: totrans-1
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '杰弗里·S·维特尔  '
- en: 'Distinguished Research Staff Member, Oak Ridge National Laboratory; Professor,
    Georgia Institute of Technology.GPUs have recently burst onto the scientific computing
    scene as an innovative technology that has demonstrated substantial performance
    and energy efficiency improvements for the numerous scientific applications. These
    initial applications were often pioneered by early adopters, who went to great
    effort to make use of GPUs. More recently, the critical question facing this technology
    is whether it can become pervasive across the multiple, diverse algorithms in
    scientific computing, and useful to a broad range of users, not only the early
    adopters. A key barrier to this wider adoption is software development: writing
    and optimizing massively parallel CUDA code, using new performance and correctness
    tools, leveraging libraries, and understanding the GPU architecture.Part of this
    challenge will be solved by experts sharing their knowledge and methodology with
    other users through books, tutorials, and collaboration. *CUDA Application Design
    and Development* is one such book. In this book, the author provides clear, detailed
    explanations of implementing important algorithms, such as algorithms in quantum
    chemistry, machine learning, and computer vision methods, on GPUs. Not only does
    the book describe the methodologies that underpin GPU programming, but it describes
    how to recast algorithms to maximize the benefit of GPU architectures. In addition,
    the book provides many case studies, which are used to explain and reinforce important
    GPU concepts like CUDA threads, the GPU memory hierarchy, and scalability across
    multiple GPUs including an MPI example demonstrated near-linear scaling to 500
    GPUs.Lastly, no programming language stands alone. Arguably, for any language
    to be successful, it must be surrounded by an ecosystem of powerful compilers,
    performance and correctness tools, and optimized libraries. These pragmatic aspects
    of software development are often the most important factor to developing applications
    quickly. *CUDA Application Design and Development* does not disappoint in this
    area, as it devotes multiple chapters to describing how to use CUDA compilers,
    debuggers, performance profilers, libraries, and interoperability with other languages.I
    have enjoyed learning from this book, and I am certain you will also.20 September
    2011'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '奥克里奇国家实验室杰出研究员；乔治亚理工学院教授。最近，GPU作为一种创新技术，迅速进入了科学计算领域，展示了在众多科学应用中显著的性能和能源效率提升。这些初步应用通常由早期采用者开创，他们付出了巨大努力来使用GPU。最近，这项技术面临的关键问题是，是否能够跨多个多样化的科学计算算法普遍应用，并对广泛的用户群体有用，而不仅仅是早期采用者。推动这项技术更广泛采用的关键障碍之一是软件开发：编写和优化大规模并行的CUDA代码，使用新的性能和正确性工具，利用库，以及理解GPU架构。这一挑战的一部分将通过专家通过书籍、教程和合作与其他用户分享他们的知识和方法来解决。*CUDA应用设计与开发*就是一本这样的书。在本书中，作者提供了清晰、详细的解释，讲解如何在GPU上实现重要的算法，例如量子化学、机器学习和计算机视觉方法的算法。这本书不仅描述了支撑GPU编程的基本方法论，还讲述了如何重新构造算法，以最大化GPU架构的优势。此外，本书提供了许多案例研究，用于解释和巩固GPU概念，如CUDA线程、GPU内存层次结构以及多个GPU之间的可扩展性，包括一个MPI示例，演示了接近线性扩展到500个GPU的能力。最后，没有任何编程语言是孤立存在的。可以说，任何语言要想成功，必须拥有一个强大的编译器、性能和正确性工具以及优化库的生态系统。这些软件开发的务实方面往往是快速开发应用程序的最重要因素。*CUDA应用设计与开发*在这一方面毫不逊色，书中专门有多个章节描述如何使用CUDA编译器、调试器、性能分析工具、库，并与其他语言进行互操作性。我从这本书中学到了很多，我相信你也会如此。2011年9月20日  '

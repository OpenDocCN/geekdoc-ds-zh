- en: PYTHON 3.8 QUICK REFERENCE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Common operations on numerical types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**i+j**` is the sum of `i` and `j`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i–j**` is `i` minus `j`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i*j**` is the product of `i` and `j`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i//j**` is floor division.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i/j**` is floating-point division.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i%j**` is the remainder when the `int` `i` is divided by the `int` `j`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**i**j**` is `i` raised to the power `j`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**x += y**` is equivalent to `x = x + y`. `***=**` and `**-=**` work the same
    way.'
  prefs: []
  type: TYPE_NORMAL
- en: The comparison operators are `==` (equal), `!=` (not equal), `>` (greater),
    `>=` (at least), `<`, (less) and `<=` (at most).
  prefs: []
  type: TYPE_NORMAL
- en: Boolean operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**x == y**` returns `True` if `x` and `y` are equal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**x != y**` returns `True` if `x` and `y` are not equal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**<, >, <=, >=**` have their usual meanings.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**a and b**` is `True` if both `a` and `b` are `True`, and `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**a or b**` is `True` if at least one of `a` or `b` is `True`, and `False`
    otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**not a**` is `True` if `a` is `False`, and `False` if `a` is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: Common operations on sequence types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**seq[i]**` returns the `i`^(th) element in the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**len(seq)**` returns the length of the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**seq1 + seq2**` concatenates the two sequences. (Not available for ranges.)'
  prefs: []
  type: TYPE_NORMAL
- en: '`**n*seq**` returns a sequence that repeats `seq` `n` times. (Not available
    for ranges.)'
  prefs: []
  type: TYPE_NORMAL
- en: '`**seq[start:end]**` returns a new sequence that is a slice of `seq`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**e in seq**` tests whether `e` is contained in the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**e not in seq**` tests whether `e` is not contained in the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**for e in seq**` iterates over the elements of the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common string methods**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**s.count(s1)**` counts how many times the string `s1` occurs in `s`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.find(s1)**` returns the index of the first occurrence of the substring
    `s1` in `s`; returns `-1` if `s1` is not in `s`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.rfind(s1)**` same as `find`, but starts from the end of `s.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.index(s1)**` same as `find`, but raises an exception if `s1` is not in
    `s.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.rindex(s1)**` same as `index`, but starts from the end of `s.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.lower()**` converts all uppercase letters to lowercase.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.replace(old, new)**` replaces all occurrences of string `old` with string
    `new`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.rstrip()**` removes trailing white space.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**s.split(d)**` Splits `s` using `d` as a delimiter. Returns a list of substrings
    of `s`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common list methods**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**L.append(e)**` adds the object `e` to the end of `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.count(e)**` returns the number of times that e occurs in `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.insert(i, e)**` inserts the object `e` into `L` at index `i`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.extend(L1)**` appends the items in list `L1` to the end of `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.remove(e)**` deletes the first occurrence of `e` from `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.index(e)**` returns the index of the first occurrence of `e` in `L`. Raises
    `ValueError` if `e` not in `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.pop(i)**` removes and returns the item at index `i`; `i` defaults to `-1.`
    Raises `IndexError` if `L` is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.sort()**` has the side effect of sorting the elements of `L`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.reverse()**` has the side effect of reversing the order of the elements
    in `L.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.copy()**` returns a shallow copy of `L.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**L.deepcopy()**` returns a deep copy of `L.`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common operations on dictionaries**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**len(d)**` returns the number of items in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d.keys()**` returns a view of the keys in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d.values()**` returns a view of the values in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d.items()**` returns a view of the (key, value) pairs in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**k in d**` returns `True` if key `k` is in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d[k]**` returns the item in `d` with key `k`. Raises `KeyError` if `k` is
    not in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d.get(k, v)**` returns `d[k]` if `k` in `d`, and `v` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**d[k] = v**` associates the value `v` with the key `k`. If there is already
    a value associated with `k`, that value is replaced.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**del d[k]**` removes element with key `k` from `d`. Raises `KeyError` if
    `k` is not in `d`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**for k in d**` iterates over the keys in `d.`'
  prefs: []
  type: TYPE_NORMAL
- en: Common input/output mechanisms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**input(msg)**` prints `msg` and then returns the value entered as a string.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**print(s1, …, sn)**` prints strings `s1, …, sn` separated by spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**open(''file_name'', ''w'')**` creates a file for writing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**open(''file_name'', ''r'')**` opens an existing file for reading.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**open(''file_name'', ''a'')**` opens an existing file for appending.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.read()**` returns a string containing contents of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.readline()**` returns the next line in the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.readlines()**` returns a list containing lines of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.write(s)**` writes the string `s` to the end of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.writelines(L)**` writes each element of `L` to the file as a
    separate line.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**file_handle.close()**` closes the file.'
  prefs: []
  type: TYPE_NORMAL

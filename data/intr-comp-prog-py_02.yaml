- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: GETTING STARTED
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开始
- en: 'A computer does two things, and two things only: it performs calculations and
    it remembers the results of those calculations. But it does those two things extremely
    well. The typical computer that sits on a desk or in a backpack performs a 100
    billion or so calculations a second. It''s hard to imagine how truly fast that
    is. Think about holding a ball a meter above the floor, and letting it go. By
    the time it reaches the floor, your computer could have executed more than a billion
    instructions. As for memory, a small computer might have hundreds of gigabytes
    of storage. How big is that? If a byte (the number of bits, typically eight, required
    to represent one character) weighed one gram (which it doesn''t), 100 gigabytes
    would weigh 100,000 metric tons. For comparison, that''s roughly the combined
    weight of 16,000 African elephants.[²](#c1-fn-0001)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机只做两件事，而且仅仅这两件事：执行计算并记住计算结果。但它在这两方面做得极其出色。典型的桌面或背包里的计算机每秒可以执行大约1000亿次计算。很难想象这是多么快。想象一下把一个球放在离地面一米高的地方，然后放手。在它落地的那一刻，你的计算机可能已经执行了超过十亿条指令。至于内存，小型计算机可能有数百GB的存储。那有多大？如果一个字节（表示一个字符所需的位数，通常是八个）重一克（实际上并不是），100GB将重达10万吨。相比之下，这大约是16000头非洲大象的总重量。[²](#c1-fn-0001)
- en: For most of human history, computation was limited by how fast the human brain
    could calculate and how well the human hand could record computational results.
    This meant that only the smallest problems could be attacked computationally.
    Even with the speed of modern computers, some problems are still beyond modern
    computational models (e.g., fully understanding climate change), but more and
    more problems are proving amenable to computational solution. It is our hope that
    by the time you finish this book, you will feel comfortable bringing computational
    thinking to bear on solving many of the problems you encounter during your studies,
    work, and even everyday life.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在人类历史的大部分时间里，计算受到人脑计算速度和人手记录计算结果的能力的限制。这意味着只有最小的问题可以通过计算方法解决。即使在现代计算机的速度下，一些问题仍然超出了现代计算模型（例如，全面理解气候变化），但越来越多的问题证明可以通过计算解决。我们希望，当你完成本书时，能够自如地将计算思维应用于解决你在学习、工作乃至日常生活中遇到的许多问题。
- en: What do we mean by computational thinking?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的计算思维是什么？
- en: All knowledge can be thought of as either declarative or imperative. **Declarative
    knowledge** is composed of statements of fact. For example, “the square root of
    `x` is a number `y` such that `y*y = x`,” and “it is possible to travel by train
    from Paris to Rome.” These are statements of fact. Unfortunately, they don't tell
    us anything about how to find a square root or how to take trains from Paris to
    Rome.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有知识都可以被视为**陈述性知识**或**命令性知识**。**陈述性知识**由事实陈述组成。例如，“`x`的平方根是一个数字`y`，使得`y*y =
    x`，”以及“可以通过火车从巴黎到罗马旅行。”这些都是事实陈述。不幸的是，它们并没有告诉我们如何找到平方根或如何从巴黎乘火车到罗马。
- en: '**Imperative knowledge** is “how to” knowledge, or recipes for deducing information.
    Heron of Alexandria was the first[³](#c1-fn-0002) to document a way to compute
    the square root of a number. His method for finding the square root of a number,
    call it `x`, can be summarized as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令性知识**是“如何”知识，或推导信息的食谱。亚历山大的希罗尼斯是第一个[³](#c1-fn-0002)记录计算平方根的方法的人。他找到平方根的步骤，可以总结为：'
- en: 1\. Start with a guess, `g`.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 从一个猜测`g`开始。
- en: 2\. If `g*g` is close enough to `x`, stop and say that `g` is the answer.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 如果`g*g`足够接近`x`，则停止并说`g`是答案。
- en: 3\. Otherwise create a new guess by averaging `g` and `x/g`, i.e., `(g + x/g)/2`.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 否则，通过平均`g`和`x/g`来创建一个新的猜测，即`(g + x/g)/2`。
- en: 4\. Using this new guess, which we again call g, repeat the process until `g*g`
    is close enough to `x`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 使用这个新的猜测，我们再次称之为g，重复这个过程，直到`g*g`足够接近`x`。
- en: Consider finding the square root of `25`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑找到`25`的平方根。
- en: 1\. Set `g` to some arbitrary value, e.g., `3`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 将`g`设为某个任意值，例如`3`。
- en: 2\. We decide that `3*3 = 9` is not close enough to `25`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 我们决定`3*3 = 9`不够接近`25`。
- en: 3\. Set `g to (3 + 25/3)/2 = 5.67`.[⁴](#c1-fn-0003)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 将`g`设为`(3 + 25/3)/2 = 5.67`。[⁴](#c1-fn-0003)
- en: 4\. We decide that `5.67*5.67 = 32.15` is still not close enough to `25`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 我们决定`5.67*5.67 = 32.15`仍然没有足够接近`25`。
- en: 5\. Set `g to (5.67 + 25/5.67)/2 = 5.04`
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5\. 将`g`设为`(5.67 + 25/5.67)/2 = 5.04`
- en: 6\. We decide that `5.04*5.04 = 25.4` is close enough, so we stop and declare
    `5.04` to be an adequate approximation to the square root of `25`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6\. 我们决定`5.04*5.04 = 25.4`足够接近，所以我们停止并宣布`5.04`是`25`的平方根的足够近似值。
- en: Note that the description of the method is a sequence of simple steps, together
    with a flow of control that specifies when to execute each step. Such a description
    is called an **algorithm**.[⁵](#c1-fn-0004) The algorithm we used to approximate
    square root is an example of a guess-and-check algorithm. It is based on the fact
    that it is easy to check whether or not a guess is good enough.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，该方法的描述是一系列简单步骤，以及指定何时执行每个步骤的控制流。这种描述称为**算法**。[⁵](#c1-fn-0004) 我们用来近似平方根的算法是猜测和检查算法的一个例子。
- en: More formally, an algorithm is a finite list of instructions describing a set
    of **computations** that when executed on a set of inputs will proceed through
    a sequence of well-defined states and eventually produce an output.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更正式地说，算法是一系列有限的指令，描述了一组**计算**，当应用于一组输入时，将按照一系列明确定义的状态序列进行，并最终产生一个输出。
- en: 'An algorithm is like a recipe from a cookbook:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 算法就像食谱书中的配方：
- en: 1\. Put custard mixture over heat.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1\. 将奶油混合物加热。
- en: 2\. Stir.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2\. 搅拌。
- en: 3\. Dip spoon in custard.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3\. 将勺子浸入奶油中。
- en: 4\. Remove spoon and run finger across back of spoon.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 取出勺子并在勺背上划过手指。
- en: 5\. If clear path is left, remove custard from heat and let cool.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5\. 如果留下清晰的路径，将奶油从热源上取下并让其冷却。
- en: 6\. Otherwise repeat.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6\. 否则重复。
- en: The recipe includes some tests for deciding when the process is complete, as
    well as instructions about the order in which to execute instructions, sometimes
    jumping to a specific instruction based on a test.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 配方包括一些测试，用于确定过程何时完成，以及关于执行顺序的指示，有时基于测试跳转到特定指令。
- en: So how does one capture the idea of a recipe in a mechanical process? One way
    is to design a machine specifically intended to compute square roots. Odd as this
    may sound, the earliest computing machines were, in fact, **fixed-program computers**,
    meaning they were designed to solve a specific mathematical problem, e.g., to
    compute the trajectory of an artillery shell. One of the first computers (built
    in 1941 by Atanasoff and Berry) solved systems of linear equations, but could
    do nothing else. Alan Turing's bombe machine, developed during World War II, was
    designed to break German Enigma codes. Some simple computers still use this approach.
    For example, a four-function calculator[⁶](#c1-fn-0005) is a fixed-program computer.
    It can do basic arithmetic, but it cannot be used as a word processor or to run
    video games. To change the program of such a machine, one has to replace the circuitry.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何将食谱的概念转化为机械过程？一种方法是设计一台专门用于计算平方根的机器。尽管听起来很奇怪，但最早的计算机确实是**固定程序计算机**，意味着它们设计用来解决特定的数学问题，比如计算炮弹的轨迹。首台计算机之一（由阿塔纳索夫和贝里于1941年建造）解决了线性方程组，但其他问题则无法处理。艾伦·图灵在二战期间开发的波美机被设计用来破解德国恩尼格玛密码。一些简单的计算机仍然沿用这种方法。例如，四则运算计算器[⁶](#c1-fn-0005)就是一种固定程序计算机。它可以进行基本算术运算，但不能用作文字处理器或运行视频游戏。要更改这类机器的程序，必须更换电路。
- en: The first truly modern computer was the Manchester Mark 1.[⁷](#c1-fn-0006) It
    was distinguished from its predecessors by being a **stored-program computer**.
    Such a computer stores (and manipulates) a sequence of instructions, and has components
    that execute any instruction in that sequence. The heart of such a computer is
    an **interpreter** that can execute any legal set of instructions, and thus can
    be used to compute anything that can be described using those instructions. The
    result of the computation can even be a new sequence of instructions, which can
    then be executed by the computer that generated them. In other words, it is possible
    for a computer to program itself.[⁸](#c1-fn-0007)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一台真正现代化的计算机是曼彻斯特Mark 1.[⁷](#c1-fn-0006) 与其前身的显著区别在于它是**存储程序计算机**。这种计算机存储（和操作）一系列指令，并具有能够执行该序列中任何指令的组件。这种计算机的核心是一个**解释器**，可以执行任何合法的指令集，因此可用于计算任何可以用这些指令描述的东西。计算的结果甚至可以是一系列新的指令，随后可以由生成它们的计算机执行。换句话说，计算机可以对自己进行编程。[⁸](#c1-fn-0007)
- en: Both the program and the data it manipulates reside in memory. Typically, a
    **program counter** points to a particular location in memory, and computation
    starts by executing the instruction at that point. Most often, the interpreter
    simply goes to the next instruction in the sequence, but not always. In some cases,
    it performs a test, and on the basis of that test, execution may jump to another
    point in the sequence of instructions. This is called **flow of control**, and
    is essential to allowing us to write programs that perform complex tasks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 程序及其操作的数据都驻留在内存中。通常，一个**程序计数器**指向内存中的特定位置，计算从执行该点的指令开始。大多数情况下，解释器会简单地转向序列中的下一条指令，但并不总是如此。在某些情况下，它会执行一个测试，并根据该测试，执行可能跳转到指令序列中的另一个点。这被称为**控制流**，对于让我们编写执行复杂任务的程序至关重要。
- en: People sometimes use **flowcharts** to depict flow of control. By convention,
    we use rectangular boxes to depict a processing step, a diamond to depict a test,
    and arrows to indicate the order in which things are done. [Figure 1-1](#c1-fig-0001)
    contains a flowchart depicting an approach to getting dinner.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 人们有时使用**流程图**来描述控制流。根据惯例，我们用矩形框表示处理步骤，用菱形表示测试，用箭头指示执行的顺序。[图1-1](#c1-fig-0001)包含了一个展示如何准备晚餐的流程图。
- en: '![c1-fig-0001.jpg](../images/c1-fig-0001.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![c1-fig-0001.jpg](../images/c1-fig-0001.jpg)'
- en: '[Figure 1-1](#c1-fig-0001a) Flowchart of getting dinner'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-1](#c1-fig-0001a) 获取晚餐的流程图'
- en: Returning to the recipe metaphor, given a fixed set of ingredients, a good chef
    can make an unbounded number of tasty dishes by combining them in different ways.
    Similarly, given a small fixed set of primitive features, a good programmer can
    produce an unbounded number of useful programs. This is what makes programming
    such an amazing endeavor.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回到食谱的比喻，给定一组固定的原料，一个好的厨师可以通过不同的组合制作出无数美味的菜肴。同样，给定一小组固定的基本特征，一个优秀的程序员可以生成无数有用的程序。这就是编程如此惊人之处。
- en: To create recipes, or sequences of instructions, we need a **programming language**
    in which to describe them, a way to give the computer its marching orders.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建食谱或指令序列，我们需要一种**编程语言**来描述它们，给计算机下达指令的方式。
- en: In 1936, the British mathematician Alan Turing described a hypothetical computing
    device that has come to be called a **Universal Turing Machine**. The machine
    had unlimited memory in the form of a “tape” on which one could write zeroes and
    ones, and a handful of simple primitive instructions for moving, reading, and
    writing to the tape. The **Church-Turing thesis** states that if a function is
    computable, a Turing Machine can be programmed to compute it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在1936年，英国数学家阿兰·图灵描述了一种假设的计算设备，后来被称为**通用图灵机**。该机器具有无限的内存，表现为可以写入零和一的“磁带”，以及一小部分简单的原始指令用于移动、读取和写入磁带。**教会-图灵理论**指出，如果一个函数是可计算的，那么可以编写一个图灵机来计算它。
- en: The “if” in the Church-Turing thesis is important. Not all problems have computational
    solutions. Turing showed, for example, that it is impossible to write a program
    that takes an arbitrary program as input, and prints `true` if and only if the
    input program will run forever. This is known as the **halting problem**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 教会-图灵理论中的“如果”是重要的。并非所有问题都有计算解决方案。例如，图灵证明了，写一个程序，使其能够接受任意程序作为输入，并且仅当输入程序会永远运行时输出`true`，这是不可能的。这被称为**停机问题**。
- en: The Church-Turing thesis leads directly to the notion of **Turing completeness**.
    A programming language is said to be Turing complete if it can be used to simulate
    a universal Turing Machine. All modern programming languages are Turing complete.
    As a consequence, anything that can be programmed in one programming language
    (e.g., Python) can be programmed in any other programming language (e.g., Java).
    Of course, some things may be easier to program in a particular language, but
    all languages are fundamentally equal with respect to computational power.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 教会-图灵理论直接引出了**图灵完备性**的概念。如果一种编程语言可以用于模拟通用图灵机，则称其为图灵完备。所有现代编程语言都是图灵完备的。因此，任何可以用一种编程语言（例如Python）编程的东西，都可以用任何其他编程语言（例如Java）编程。当然，在特定语言中，有些东西可能更容易编程，但所有语言在计算能力上基本上是平等的。
- en: Fortunately, no programmer has to build programs out of Turing's primitive instructions.
    Instead, modern programming languages offer a larger, more convenient set of primitives.
    However, the fundamental idea of programming as the process of assembling a sequence
    of operations remains central.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，没有程序员需要使用图灵的原始指令来构建程序。相反，现代编程语言提供了更大、更方便的原语集。然而，编程作为组装一系列操作的过程这一基本思想仍然是核心。
- en: 'Whatever set of primitives you have, and whatever methods you have for assembling
    them, the best thing and the worst thing about programming are the same: the computer
    will do exactly what you tell it to do—nothing more, nothing less. This is a good
    thing because it means that you can make the computer do all sorts of fun and
    useful things. It is a bad thing because when it doesn''t do what you want it
    to do, you usually have nobody to blame but yourself.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不论你拥有哪一组原语，以及你有何种组装它们的方法，编程的最好和最糟的地方是一样的：计算机将完全按照你所指示的方式执行——没有更多，也没有更少。这是好事，因为这意味着你可以让计算机做各种有趣和有用的事情。这也是坏事，因为当它没有按照你的意图运行时，你通常只能责怪自己。
- en: There are hundreds of programming languages in the world. There is no best language.
    Different languages are better or worse for different kinds of applications. MATLAB,
    for example, is a good language for manipulating vectors and matrices. C is a
    good language for writing programs that control data networks. PHP is a good language
    for building websites. And Python is an excellent general-purpose language.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上有数百种编程语言。没有最好的语言。不同的语言适用于不同类型的应用。MATLAB例如，是一种适合操作向量和矩阵的良好语言。C是一种适合编写控制数据网络程序的良好语言。PHP是一种适合构建网站的良好语言。而Python是一种出色的通用语言。
- en: Each programming language has a set of primitive constructs, a syntax, a static
    semantics, and a semantics. By analogy with a natural language, e.g., English,
    the primitive constructs are words, the syntax describes which strings of words
    constitute well-formed sentences, the static semantics defines which sentences
    are meaningful, and the semantics defines the meaning of those sentences. The
    primitive constructs in Python include **literals** (e.g., the number `3.2` and
    the string `‘abc’`) and **infix operators** (e.g., `+` and `/`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有一组原始构造、语法、静态语义和语义。类比于自然语言，例如英语，原始构造是单词，语法描述哪些单词序列构成良好格式的句子，静态语义定义哪些句子有意义，而语义定义这些句子的意义。Python中的原始构造包括**文字**（例如数字`3.2`和字符串`‘abc’）以及**中缀运算符**（例如`+`和`/`）。
- en: The **syntax** of a language defines which strings of characters and symbols
    are well formed. For example, in English the string “Cat dog boy.” is not a syntactically
    valid sentence, because English syntax does not accept sentences of the form <noun>
    <noun> <noun>. In Python, the sequence of primitives `3.2 + 3.2` is syntactically
    well formed, but the sequence `3.2 3.2` is not.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一种语言的**语法**定义了哪些字符和符号的字符串是良好格式的。例如，在英语中，字符串“Cat dog boy.”不是语法上有效的句子，因为英语语法不接受<名词>
    <名词> <名词>形式的句子。在Python中，原语序列`3.2 + 3.2`是语法上良好格式的，但序列`3.2 3.2`则不是。
- en: The **static semantics** defines which syntactically valid strings have a meaning.
    Consider, for example, the strings “He run quickly” and “I runs quickly.” Each
    has the form <pronoun> <regular verb> <adverb>, which is a syntactically acceptable
    sequence. Nevertheless, neither is valid English, because of the rather peculiar
    rule that for a regular verb when the subject of a sentence is first or second
    person, the verb does not end with an “s,” but when the subject is third person
    singular, it does. These are examples of static semantic errors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态语义**定义了哪些语法上有效的字符串具有意义。例如，考虑字符串“He run quickly”和“I runs quickly。”每个字符串的形式为<pronoun>
    <regular verb> <adverb>，这是一个语法上可接受的序列。然而，这两者都不是有效的英语，因为有一个相当特殊的规则：对于规则动词，当句子的主语是第一或第二人称时，动词不以“s”结尾，而当主语是第三人称单数时，则以“s”结尾。这些都是静态语义错误的例子。'
- en: The **semantics** of a language associates a meaning with each syntactically
    correct string of symbols that has no static semantic errors. In natural languages,
    the semantics of a sentence can be ambiguous. For example, the sentence “I cannot
    praise this student too highly,” can be either flattering or damning. Programming
    languages are designed so that each legal program has exactly one meaning.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一种语言的**语义**将含义与每个没有静态语义错误的语法正确的符号串关联。在自然语言中，一个句子的语义可能是模糊的。例如，“我无法过于赞扬这个学生”这句话可以是恭维或谴责。编程语言的设计是确保每个合法程序只有一个确切的含义。
- en: Though syntax errors are the most common kind of error (especially for those
    learning a new programming language), they are the least dangerous kind of error.
    Every serious programming language detects all syntactic errors, and does not
    allow users to execute a program with even one syntactic error. Furthermore, in
    most cases the language system gives a sufficiently clear indication of the location
    of the error that the programmer is able to fix it without too much thought.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语法错误是最常见的错误类型（尤其是对于学习新编程语言的人来说），但它们是最不危险的错误。每种严肃的编程语言都会检测所有语法错误，并不允许用户执行即使只有一个语法错误的程序。此外，在大多数情况下，语言系统会清楚地指示错误的位置，使程序员能够在不费太多脑筋的情况下修复它。
- en: Identifying and resolving static semantic errors is more complex. Some programming
    languages, e.g., Java, do a lot of static semantic checking before allowing a
    program to be executed. Others, e.g., C and Python (alas), do relatively less
    static semantic checking before a program is executed. Python does do a considerable
    amount of semantic checking while running a program.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 识别和解决静态语义错误更为复杂。一些编程语言，例如Java，在允许程序执行之前会进行大量的静态语义检查。其他语言，例如C和Python（可悲的是），在执行程序之前相对较少进行静态语义检查。Python在运行程序时确实会进行相当多的语义检查。
- en: If a program has no syntactic errors and no static semantic errors, it has a
    meaning, i.e., it has semantics. Of course, it might not have the semantics that
    its creator intended. When a program means something other than what its creator
    thinks it means, bad things can happen.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序没有语法错误和静态语义错误，它就有意义，即具有语义。当然，它可能没有其创建者所意图的语义。当一个程序意味着与其创建者所认为的不同的东西时，坏事可能会发生。
- en: What might happen if the program has an error, and behaves in an unintended
    way?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序有错误，并且以意想不到的方式运行，会发生什么？
- en: It might crash, i.e., stop running and produce an obvious indication that it
    has done so. In a properly designed computing system, when a program crashes,
    it does not damage the overall system. Alas, some very popular computer systems
    don't have this nice property. Almost everyone who uses a personal computer has
    run a program that has managed to make it necessary to reboot the whole system.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会崩溃，即停止运行并明显指示其已崩溃。在一个设计良好的计算系统中，当程序崩溃时，它不会损坏整体系统。可悲的是，一些非常流行的计算机系统没有这种良好特性。几乎每个使用个人计算机的人都运行过需要重新启动整个系统的程序。
- en: It might keep running, and running, and running, and never stop. If you have
    no idea of approximately how long the program is supposed to take to do its job,
    this situation can be hard to recognize.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会不断运行，运行，再运行，永远不会停止。如果你对程序完成工作的时间没有大致的概念，这种情况可能很难被识别。
- en: It might run to completion and produce an answer that might, or might not, be
    correct.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会运行到完成并产生一个可能正确或可能不正确的答案。
- en: 'Each of these outcomes is bad, but the last one is certainly the worst. When
    a program appears to be doing the right thing but isn''t, bad things can follow:
    fortunes can be lost, patients can receive fatal doses of radiation therapy, airplanes
    can crash.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个结果都不好，但最后一个无疑是最糟糕的。当一个程序看似在做正确的事情但实际上并非如此时，坏事可能随之而来：财富可能会丧失，患者可能会收到致命剂量的放射治疗，飞机可能会坠毁。
- en: Whenever possible, programs should be written so that when they don't work properly,
    it is self-evident. We will discuss how to do this throughout the book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，程序应编写得如此，当它们运行不正常时，显而易见。我们将在本书中讨论如何做到这一点。
- en: '**Finger exercise**: Computers can be annoyingly literal. If you don''t tell
    them exactly what you want them to do, they are likely to do the wrong thing.
    Try writing an algorithm for driving between two destinations. Write it the way
    you would for a person, and then imagine what would happen if that person were
    as stupid as a computer, and executed the algorithm exactly as written. (For an
    amusing illustration of this, take a look at the video [https://www.youtube.com/watch?v=FN2RM-CHkuI&t=24s](https://www.youtube.com/watch?v=FN2RM-CHkuI%26t=24s).)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**指法练习**：计算机往往会字面理解你的指令。如果你没有准确告诉它们你想要做什么，它们可能会做错事情。试着为从一个目的地开车到另一个目的地写一个算法。按照你给人的方式来写，然后想象如果那个人像计算机一样愚蠢，并严格执行算法会发生什么。（想看有趣的例子，请查看视频
    [https://www.youtube.com/watch?v=FN2RM-CHkuI&t=24s](https://www.youtube.com/watch?v=FN2RM-CHkuI%26t=24s)。）'
- en: 1.1 Terms Introduced in Chapter
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 章节中引入的术语
- en: declarative knowledge
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式知识
- en: imperative knowledge
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令式知识
- en: algorithm
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法
- en: computation
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算
- en: fixed-program computer
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定程序计算机
- en: stored-program computer
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储程序计算机
- en: interpreter
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器
- en: program counter
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序计数器
- en: flow of control
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流
- en: flowchart
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程图
- en: programming language
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程语言
- en: Universal Turing machine
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用图灵机
- en: Church-Turing thesis
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丘奇-图灵论题
- en: halting problem
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止问题
- en: Turing completeness
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图灵完备性
- en: literals
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字面量
- en: infix operators
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中缀运算符
- en: syntax
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法
- en: static semantics
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态语义
- en: semantics
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义

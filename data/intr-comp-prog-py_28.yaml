- en: PYTHON 3.8 QUICK REFERENCE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PYTHON 3.8 快速参考
- en: Common operations on numerical types
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数值类型的常见操作
- en: '`**i+j**` is the sum of `i` and `j`.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i+j**` 是 `i` 和 `j` 的和。'
- en: '`**i–j**` is `i` minus `j`.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i–j**` 是 `i` 减去 `j`。'
- en: '`**i*j**` is the product of `i` and `j`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i*j**` 是 `i` 和 `j` 的乘积。'
- en: '`**i//j**` is floor division.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i//j**` 是向下取整除法。'
- en: '`**i/j**` is floating-point division.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i/j**` 是浮点除法。'
- en: '`**i%j**` is the remainder when the `int` `i` is divided by the `int` `j`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i%j**` 是整型 `i` 除以整型 `j` 的余数。'
- en: '`**i**j**` is `i` raised to the power `j`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`**i**j**` 是 `i` 的 `j` 次幂。'
- en: '`**x += y**` is equivalent to `x = x + y`. `***=**` and `**-=**` work the same
    way.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`**x += y**` 等同于 `x = x + y`。`***=**` 和 `**-=**` 也以相同方式工作。'
- en: The comparison operators are `==` (equal), `!=` (not equal), `>` (greater),
    `>=` (at least), `<`, (less) and `<=` (at most).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符有 `==` （等于）、 `!=` （不等于）、 `>` （大于）、 `>=` （至少）、 `<` （小于）和 `<=` （最多）。
- en: Boolean operators
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔运算符
- en: '`**x == y**` returns `True` if `x` and `y` are equal.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`**x == y**` 如果 `x` 和 `y` 相等，则返回 `True`。'
- en: '`**x != y**` returns `True` if `x` and `y` are not equal.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`**x != y**` 如果 `x` 和 `y` 不相等，则返回 `True`。'
- en: '`**<, >, <=, >=**` have their usual meanings.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`**<, >, <=, >=**` 具有其通常的含义。'
- en: '`**a and b**` is `True` if both `a` and `b` are `True`, and `False` otherwise.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`**a and b**` 如果 `a` 和 `b` 都为 `True`，则为 `True`，否则为 `False`。'
- en: '`**a or b**` is `True` if at least one of `a` or `b` is `True`, and `False`
    otherwise.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`**a or b**` 如果 `a` 或 `b` 至少有一个为 `True`，则为 `True`，否则为 `False`。'
- en: '`**not a**` is `True` if `a` is `False`, and `False` if `a` is `True`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`**not a**` 如果 `a` 为 `False`，则为 `True`；如果 `a` 为 `True`，则为 `False`。'
- en: Common operations on sequence types
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对序列类型的常见操作
- en: '`**seq[i]**` returns the `i`^(th) element in the sequence.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`**seq[i]**` 返回序列中的第 `i` 个元素。'
- en: '`**len(seq)**` returns the length of the sequence.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`**len(seq)**` 返回序列的长度。'
- en: '`**seq1 + seq2**` concatenates the two sequences. (Not available for ranges.)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`**seq1 + seq2**` 连接两个序列。（范围不适用。）'
- en: '`**n*seq**` returns a sequence that repeats `seq` `n` times. (Not available
    for ranges.)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`**n*seq**` 返回一个重复 `seq` `n` 次的序列。（范围不适用。）'
- en: '`**seq[start:end]**` returns a new sequence that is a slice of `seq`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`**seq[start:end]**` 返回一个新的序列，它是 `seq` 的切片。'
- en: '`**e in seq**` tests whether `e` is contained in the sequence.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`**e in seq**` 测试 `e` 是否包含在序列中。'
- en: '`**e not in seq**` tests whether `e` is not contained in the sequence.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`**e not in seq**` 测试 `e` 是否不包含在序列中。'
- en: '`**for e in seq**` iterates over the elements of the sequence.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`**for e in seq**` 遍历序列中的元素。'
- en: '**Common string methods**'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**常见字符串方法**'
- en: '`**s.count(s1)**` counts how many times the string `s1` occurs in `s`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.count(s1)**` 计算字符串 `s1` 在 `s` 中出现的次数。'
- en: '`**s.find(s1)**` returns the index of the first occurrence of the substring
    `s1` in `s`; returns `-1` if `s1` is not in `s`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.find(s1)**` 返回子字符串 `s1` 在 `s` 中第一次出现的索引；如果 `s1` 不在 `s` 中，则返回 `-1`。'
- en: '`**s.rfind(s1)**` same as `find`, but starts from the end of `s.`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.rfind(s1)**` 与 `find` 相同，但从 `s` 的末尾开始。'
- en: '`**s.index(s1)**` same as `find`, but raises an exception if `s1` is not in
    `s.`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.index(s1)**` 与 `find` 相同，但如果 `s1` 不在 `s` 中，则引发异常。'
- en: '`**s.rindex(s1)**` same as `index`, but starts from the end of `s.`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.rindex(s1)**` 与 `index` 相同，但从 `s` 的末尾开始。'
- en: '`**s.lower()**` converts all uppercase letters to lowercase.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.lower()**` 将所有大写字母转换为小写。'
- en: '`**s.replace(old, new)**` replaces all occurrences of string `old` with string
    `new`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.replace(old, new)**` 将字符串 `old` 的所有出现替换为字符串 `new`。'
- en: '`**s.rstrip()**` removes trailing white space.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.rstrip()**` 移除末尾的空白字符。'
- en: '`**s.split(d)**` Splits `s` using `d` as a delimiter. Returns a list of substrings
    of `s`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`**s.split(d)**` 使用 `d` 作为分隔符分割 `s`。返回 `s` 的子字符串列表。'
- en: '**Common list methods**'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**常见列表方法**'
- en: '`**L.append(e)**` adds the object `e` to the end of `L`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.append(e)**` 将对象 `e` 添加到列表 `L` 的末尾。'
- en: '`**L.count(e)**` returns the number of times that e occurs in `L`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.count(e)**` 返回元素 `e` 在列表 `L` 中出现的次数。'
- en: '`**L.insert(i, e)**` inserts the object `e` into `L` at index `i`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.insert(i, e)**` 在列表 `L` 的索引 `i` 处插入对象 `e`。'
- en: '`**L.extend(L1)**` appends the items in list `L1` to the end of `L`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.extend(L1)**` 将列表 `L1` 中的项追加到列表 `L` 的末尾。'
- en: '`**L.remove(e)**` deletes the first occurrence of `e` from `L`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.remove(e)**` 从列表 `L` 中删除 `e` 的第一次出现。'
- en: '`**L.index(e)**` returns the index of the first occurrence of `e` in `L`. Raises
    `ValueError` if `e` not in `L`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.index(e)**` 返回 `e` 在列表 `L` 中第一次出现的索引。如果 `e` 不在 `L` 中，则引发 `ValueError`。'
- en: '`**L.pop(i)**` removes and returns the item at index `i`; `i` defaults to `-1.`
    Raises `IndexError` if `L` is empty.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.pop(i)**` 移除并返回索引 `i` 处的项；`i` 默认为 `-1`。如果 `L` 为空，则引发 `IndexError`。'
- en: '`**L.sort()**` has the side effect of sorting the elements of `L`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.sort()**` 具有对 `L` 中元素进行排序的副作用。'
- en: '`**L.reverse()**` has the side effect of reversing the order of the elements
    in `L.`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.reverse()**` 具有反转 `L` 中元素顺序的副作用。'
- en: '`**L.copy()**` returns a shallow copy of `L.`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.copy()**` 返回 `L` 的浅拷贝。'
- en: '`**L.deepcopy()**` returns a deep copy of `L.`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`**L.deepcopy()**` 返回 `L` 的深拷贝。'
- en: '**Common operations on dictionaries**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**字典的常见操作**'
- en: '`**len(d)**` returns the number of items in `d`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`**len(d)**` 返回 `d` 中项目的数量。'
- en: '`**d.keys()**` returns a view of the keys in `d`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d.keys()**` 返回 `d` 中键的视图。'
- en: '`**d.values()**` returns a view of the values in `d`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d.values()**` 返回 `d` 中值的视图。'
- en: '`**d.items()**` returns a view of the (key, value) pairs in `d`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d.items()**` 返回 `d` 中的 (键, 值) 对的视图。'
- en: '`**k in d**` returns `True` if key `k` is in `d`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`**k in d**` 如果键 `k` 在 `d` 中，则返回 `True`。'
- en: '`**d[k]**` returns the item in `d` with key `k`. Raises `KeyError` if `k` is
    not in `d`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d[k]**` 返回 `d` 中键为 `k` 的项目。如果 `k` 不在 `d` 中，则引发 `KeyError`。'
- en: '`**d.get(k, v)**` returns `d[k]` if `k` in `d`, and `v` otherwise.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d.get(k, v)**` 如果 `k` 在 `d` 中，则返回 `d[k]`，否则返回 `v`。'
- en: '`**d[k] = v**` associates the value `v` with the key `k`. If there is already
    a value associated with `k`, that value is replaced.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`**d[k] = v**` 将值 `v` 关联到键 `k`。如果 `k` 已经关联了一个值，则该值会被替换。'
- en: '`**del d[k]**` removes element with key `k` from `d`. Raises `KeyError` if
    `k` is not in `d`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`**del d[k]**` 从 `d` 中删除键为 `k` 的元素。如果 `k` 不在 `d` 中，则引发 `KeyError`。'
- en: '`**for k in d**` iterates over the keys in `d.`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`**for k in d**` 遍历 `d` 中的键。'
- en: Common input/output mechanisms
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的输入/输出机制
- en: '`**input(msg)**` prints `msg` and then returns the value entered as a string.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`**input(msg)**` 打印 `msg`，然后返回输入的值作为字符串。'
- en: '`**print(s1, …, sn)**` prints strings `s1, …, sn` separated by spaces.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`**print(s1, …, sn)**` 打印字符串 `s1, …, sn`，并用空格分隔。'
- en: '`**open(''file_name'', ''w'')**` creates a file for writing.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`**open(''file_name'', ''w'')**` 创建一个用于写入的文件。'
- en: '`**open(''file_name'', ''r'')**` opens an existing file for reading.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`**open(''file_name'', ''r'')**` 打开现有文件以进行读取。'
- en: '`**open(''file_name'', ''a'')**` opens an existing file for appending.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`**open(''file_name'', ''a'')**` 打开现有文件以进行追加。'
- en: '`**file_handle.read()**` returns a string containing contents of the file.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.read()**` 返回包含文件内容的字符串。'
- en: '`**file_handle.readline()**` returns the next line in the file.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.readline()**` 返回文件中的下一行。'
- en: '`**file_handle.readlines()**` returns a list containing lines of the file.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.readlines()**` 返回包含文件行的列表。'
- en: '`**file_handle.write(s)**` writes the string `s` to the end of the file.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.write(s)**` 将字符串 `s` 写入文件末尾。'
- en: '`**file_handle.writelines(L)**` writes each element of `L` to the file as a
    separate line.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.writelines(L)**` 将 `L` 的每个元素写入文件作为单独的行。'
- en: '`**file_handle.close()**` closes the file.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`**file_handle.close()**` 关闭文件。'
